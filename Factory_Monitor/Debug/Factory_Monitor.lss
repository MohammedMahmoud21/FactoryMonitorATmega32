
Factory_Monitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  00001e44  00001ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008d  00800136  00800136  00001fae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f73  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140b  00000000  00000000  0000630f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022ba  00000000  00000000  0000771a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ac  00000000  00000000  000099d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000116e  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026ca  00000000  00000000  0000b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000dab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_1>
       8:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_2>
       c:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 09 	call	0x133e	; 0x133e <main>
      8a:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Factory_voidMode>:

/*********************Static Functions Implementations***************************/

static void Factory_voidMode(void)
{
	APP_Pannel++;
      92:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <APP_Pannel>
	Factory_u8DisplayFlag = 0;
      9c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <Factory_u8DisplayFlag>
	if(APP_Pannel >= NUMBER_OF_PANNELS-2)
      a0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	10 f0       	brcs	.+4      	; 0xac <Factory_voidMode+0x1a>
	{
		APP_Pannel = MAIN;
      a8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <APP_Pannel>
      ac:	08 95       	ret

000000ae <Factory_voidDisplayStrings>:
		}
	}
}

static void Factory_voidDisplayStrings(LCD_Profile_Data_t *Copy_Temp,LCD_Profile_Data_t *Copy_Humdt,LCD_Profile_Data_t *Copy_Gas)
{
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	7c 01       	movw	r14, r24
      bc:	8b 01       	movw	r16, r22
      be:	ea 01       	movw	r28, r20
		H_Lcd_Void_LCDGoTo(Copy_Temp->Row,Copy_Temp->Colum);
      c0:	fc 01       	movw	r30, r24
      c2:	63 81       	ldd	r22, Z+3	; 0x03
      c4:	82 81       	ldd	r24, Z+2	; 0x02
      c6:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString(Copy_Temp->Name);
      ca:	f7 01       	movw	r30, r14
      cc:	80 81       	ld	r24, Z
      ce:	91 81       	ldd	r25, Z+1	; 0x01
      d0:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
		/**************************/
		H_Lcd_Void_LCDGoTo(Copy_Humdt->Row,Copy_Humdt->Colum);
      d4:	f8 01       	movw	r30, r16
      d6:	63 81       	ldd	r22, Z+3	; 0x03
      d8:	82 81       	ldd	r24, Z+2	; 0x02
      da:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString(Copy_Humdt->Name);
      de:	f8 01       	movw	r30, r16
      e0:	80 81       	ld	r24, Z
      e2:	91 81       	ldd	r25, Z+1	; 0x01
      e4:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
		/**************************/
		H_Lcd_Void_LCDGoTo(Copy_Gas->Row,Copy_Gas->Colum);
      e8:	6b 81       	ldd	r22, Y+3	; 0x03
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString(Copy_Gas->Name);
      f0:	88 81       	ld	r24, Y
      f2:	99 81       	ldd	r25, Y+1	; 0x01
      f4:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
}
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	ff 90       	pop	r15
     102:	ef 90       	pop	r14
     104:	08 95       	ret

00000106 <Factory_voidChoseProgram>:
	}
}

static void Factory_voidChoseProgram(void)
{
	H_Lcd_Void_LCDGoTo(0,0);
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Press PB1 for First");
     10e:	88 e8       	ldi	r24, 0x88	; 136
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Press PB2 for Second");
     11e:	8c e9       	ldi	r24, 0x9C	; 156
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(2,0);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	82 e0       	ldi	r24, 0x02	; 2
     12a:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Press PB3 for Third");
     12e:	81 eb       	ldi	r24, 0xB1	; 177
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
	while(MAIN == APP_Pannel)
     136:	12 c0       	rjmp	.+36     	; 0x15c <Factory_voidChoseProgram+0x56>
	{
		if(PUSH_BUTTON_PRESSED == H_PushButton_U8_PushButtonRead(PUSH_BUTTON_0))
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     13e:	81 11       	cpse	r24, r1
     140:	04 c0       	rjmp	.+8      	; 0x14a <Factory_voidChoseProgram+0x44>
		{
			User_Program_Choice = PROFILE_ONE;
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <User_Program_Choice>
			break;
     148:	08 95       	ret
		}
		else if((PUSH_BUTTON_PRESSED == H_PushButton_U8_PushButtonRead(PUSH_BUTTON_2)))
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     150:	81 11       	cpse	r24, r1
     152:	04 c0       	rjmp	.+8      	; 0x15c <Factory_voidChoseProgram+0x56>
		{
			User_Program_Choice = PROFILE_THREE;
     154:	83 e0       	ldi	r24, 0x03	; 3
     156:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <User_Program_Choice>
			break;
     15a:	08 95       	ret
	H_Lcd_Void_LCDWriteString("Press PB1 for First");
	H_Lcd_Void_LCDGoTo(1,0);
	H_Lcd_Void_LCDWriteString("Press PB2 for Second");
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString("Press PB3 for Third");
	while(MAIN == APP_Pannel)
     15c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     160:	88 23       	and	r24, r24
     162:	51 f3       	breq	.-44     	; 0x138 <Factory_voidChoseProgram+0x32>
     164:	08 95       	ret

00000166 <Factory_voidEditProfil>:
		APP_Pannel = MAIN;
	}
}

static void Factory_voidEditProfil(LCD_Profile_Data_t *Copy_Temp,LCD_Profile_Data_t *Copy_Humdt,LCD_Profile_Data_t *Copy_Gas,APP_PANNEL_t Copy_CurrentPannel)
{
     166:	cf 92       	push	r12
     168:	df 92       	push	r13
     16a:	ef 92       	push	r14
     16c:	ff 92       	push	r15
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	6c 01       	movw	r12, r24
     178:	7b 01       	movw	r14, r22
     17a:	8a 01       	movw	r16, r20
     17c:	d2 2f       	mov	r29, r18
	APP_Values_t Local_u8ModifyCounter=APP_TEMP;
     17e:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_CurrentPannel == APP_Pannel)
     180:	68 c0       	rjmp	.+208    	; 0x252 <Factory_voidEditProfil+0xec>
	{
		if(PUSH_BUTTON_PRESSED ==  H_PushButton_U8_PushButtonRead(PUSH_BUTTON_0))
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     188:	81 11       	cpse	r24, r1
     18a:	5d c0       	rjmp	.+186    	; 0x246 <Factory_voidEditProfil+0xe0>
		{
			/*Means user want to change in other value maybe (Temp, Humidity or Gas)*/
			Local_u8ModifyCounter++;
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	9c 0f       	add	r25, r28
			Local_u8ModifyCounter= (Local_u8ModifyCounter)%NUMBER_OF_VALUES;
     190:	cb ea       	ldi	r28, 0xAB	; 171
     192:	9c 9f       	mul	r25, r28
     194:	c1 2d       	mov	r28, r1
     196:	11 24       	eor	r1, r1
     198:	c6 95       	lsr	r28
     19a:	8c 2f       	mov	r24, r28
     19c:	88 0f       	add	r24, r24
     19e:	c8 0f       	add	r28, r24
     1a0:	9c 1b       	sub	r25, r28
     1a2:	c9 2f       	mov	r28, r25
     1a4:	50 c0       	rjmp	.+160    	; 0x246 <Factory_voidEditProfil+0xe0>
		{;}
		
		while(PUSH_BUTTON_PRESSED ==  H_PushButton_U8_PushButtonRead(PUSH_BUTTON_2))
		{
			/*Means user want to increase value (+)*/
			switch(Local_u8ModifyCounter)
     1a6:	c1 30       	cpi	r28, 0x01	; 1
     1a8:	e9 f0       	breq	.+58     	; 0x1e4 <Factory_voidEditProfil+0x7e>
     1aa:	18 f0       	brcs	.+6      	; 0x1b2 <Factory_voidEditProfil+0x4c>
     1ac:	c2 30       	cpi	r28, 0x02	; 2
     1ae:	99 f1       	breq	.+102    	; 0x216 <Factory_voidEditProfil+0xb0>
     1b0:	4a c0       	rjmp	.+148    	; 0x246 <Factory_voidEditProfil+0xe0>
			{
				case APP_TEMP:	(Copy_Temp->Value)++;
     1b2:	f6 01       	movw	r30, r12
     1b4:	84 81       	ldd	r24, Z+4	; 0x04
     1b6:	95 81       	ldd	r25, Z+5	; 0x05
     1b8:	a6 81       	ldd	r26, Z+6	; 0x06
     1ba:	b7 81       	ldd	r27, Z+7	; 0x07
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	a1 1d       	adc	r26, r1
     1c0:	b1 1d       	adc	r27, r1
     1c2:	84 83       	std	Z+4, r24	; 0x04
     1c4:	95 83       	std	Z+5, r25	; 0x05
     1c6:	a6 83       	std	Z+6, r26	; 0x06
     1c8:	b7 83       	std	Z+7, r27	; 0x07
				H_Lcd_Void_LCDGoTo(Copy_Temp->Row,(Copy_Temp->Colum)+LCD_TEMP_OFFSET);
     1ca:	63 81       	ldd	r22, Z+3	; 0x03
     1cc:	6b 5f       	subi	r22, 0xFB	; 251
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteNumber(Copy_Temp->Value);
     1d4:	f6 01       	movw	r30, r12
     1d6:	64 81       	ldd	r22, Z+4	; 0x04
     1d8:	75 81       	ldd	r23, Z+5	; 0x05
     1da:	86 81       	ldd	r24, Z+6	; 0x06
     1dc:	97 81       	ldd	r25, Z+7	; 0x07
     1de:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
				break;
     1e2:	31 c0       	rjmp	.+98     	; 0x246 <Factory_voidEditProfil+0xe0>
				case APP_HUMDT: Copy_Humdt->Value++;
     1e4:	f7 01       	movw	r30, r14
     1e6:	84 81       	ldd	r24, Z+4	; 0x04
     1e8:	95 81       	ldd	r25, Z+5	; 0x05
     1ea:	a6 81       	ldd	r26, Z+6	; 0x06
     1ec:	b7 81       	ldd	r27, Z+7	; 0x07
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	a1 1d       	adc	r26, r1
     1f2:	b1 1d       	adc	r27, r1
     1f4:	84 83       	std	Z+4, r24	; 0x04
     1f6:	95 83       	std	Z+5, r25	; 0x05
     1f8:	a6 83       	std	Z+6, r26	; 0x06
     1fa:	b7 83       	std	Z+7, r27	; 0x07
				H_Lcd_Void_LCDGoTo((Copy_Humdt->Row),(Copy_Humdt->Colum)+LCD_HUMDT_OFFSET);
     1fc:	63 81       	ldd	r22, Z+3	; 0x03
     1fe:	67 5f       	subi	r22, 0xF7	; 247
     200:	82 81       	ldd	r24, Z+2	; 0x02
     202:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteNumber(Copy_Humdt->Value);
     206:	f7 01       	movw	r30, r14
     208:	64 81       	ldd	r22, Z+4	; 0x04
     20a:	75 81       	ldd	r23, Z+5	; 0x05
     20c:	86 81       	ldd	r24, Z+6	; 0x06
     20e:	97 81       	ldd	r25, Z+7	; 0x07
     210:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
				break;
     214:	18 c0       	rjmp	.+48     	; 0x246 <Factory_voidEditProfil+0xe0>
				case APP_GAS:	Copy_Gas->Value++;
     216:	f8 01       	movw	r30, r16
     218:	84 81       	ldd	r24, Z+4	; 0x04
     21a:	95 81       	ldd	r25, Z+5	; 0x05
     21c:	a6 81       	ldd	r26, Z+6	; 0x06
     21e:	b7 81       	ldd	r27, Z+7	; 0x07
     220:	01 96       	adiw	r24, 0x01	; 1
     222:	a1 1d       	adc	r26, r1
     224:	b1 1d       	adc	r27, r1
     226:	84 83       	std	Z+4, r24	; 0x04
     228:	95 83       	std	Z+5, r25	; 0x05
     22a:	a6 83       	std	Z+6, r26	; 0x06
     22c:	b7 83       	std	Z+7, r27	; 0x07
				H_Lcd_Void_LCDGoTo((Copy_Gas->Row),(Copy_Gas->Colum)+LCD_GAS_OFFSET);
     22e:	63 81       	ldd	r22, Z+3	; 0x03
     230:	6c 5f       	subi	r22, 0xFC	; 252
     232:	82 81       	ldd	r24, Z+2	; 0x02
     234:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteNumber(Copy_Gas->Value);
     238:	f8 01       	movw	r30, r16
     23a:	64 81       	ldd	r22, Z+4	; 0x04
     23c:	75 81       	ldd	r23, Z+5	; 0x05
     23e:	86 81       	ldd	r24, Z+6	; 0x06
     240:	97 81       	ldd	r25, Z+7	; 0x07
     242:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			Local_u8ModifyCounter= (Local_u8ModifyCounter)%NUMBER_OF_VALUES;
		}
		else
		{;}
		
		while(PUSH_BUTTON_PRESSED ==  H_PushButton_U8_PushButtonRead(PUSH_BUTTON_2))
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     24c:	88 23       	and	r24, r24
     24e:	09 f4       	brne	.+2      	; 0x252 <Factory_voidEditProfil+0xec>
     250:	aa cf       	rjmp	.-172    	; 0x1a6 <Factory_voidEditProfil+0x40>
}

static void Factory_voidEditProfil(LCD_Profile_Data_t *Copy_Temp,LCD_Profile_Data_t *Copy_Humdt,LCD_Profile_Data_t *Copy_Gas,APP_PANNEL_t Copy_CurrentPannel)
{
	APP_Values_t Local_u8ModifyCounter=APP_TEMP;
	while(Copy_CurrentPannel == APP_Pannel)
     252:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     256:	8d 17       	cp	r24, r29
     258:	09 f4       	brne	.+2      	; 0x25c <Factory_voidEditProfil+0xf6>
     25a:	93 cf       	rjmp	.-218    	; 0x182 <Factory_voidEditProfil+0x1c>
		}
		
		
		
	}
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	08 95       	ret

0000026e <Factory_voidPanicModeOn>:
	
}

static void Factory_voidPanicModeOn(void)
{
	Ultra_u16Dist = UltraSonic_Update();
     26e:	0e 94 17 09 	call	0x122e	; 0x122e <UltraSonic_Update>
     272:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixunssfsi>
     276:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <Ultra_u16Dist+0x1>
     27a:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <Ultra_u16Dist>
	while(Ultra_u16Dist >= 10)
     27e:	08 c0       	rjmp	.+16     	; 0x290 <Factory_voidPanicModeOn+0x22>
	{
		Ultra_u16Dist = UltraSonic_Update();
     280:	0e 94 17 09 	call	0x122e	; 0x122e <UltraSonic_Update>
     284:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixunssfsi>
     288:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <Ultra_u16Dist+0x1>
     28c:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <Ultra_u16Dist>
}

static void Factory_voidPanicModeOn(void)
{
	Ultra_u16Dist = UltraSonic_Update();
	while(Ultra_u16Dist >= 10)
     290:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Ultra_u16Dist>
     294:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <Ultra_u16Dist+0x1>
     298:	0a 97       	sbiw	r24, 0x0a	; 10
     29a:	90 f7       	brcc	.-28     	; 0x280 <Factory_voidPanicModeOn+0x12>
	{
		Ultra_u16Dist = UltraSonic_Update();
		//_delay_ms(600);
	}
	/*Someone is near*/
	H_LED_Void_LedOff(LED_RED);
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	0e 94 3b 08 	call	0x1076	; 0x1076 <H_LED_Void_LedOff>
	H_Buzzer_Void_BuzzerOff();
     2a2:	0e 94 6f 06 	call	0xcde	; 0xcde <H_Buzzer_Void_BuzzerOff>
	while(Ultra_u16Dist < 10)
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <Factory_voidPanicModeOn+0x4a>
	{
		Ultra_u16Dist = UltraSonic_Update();
     2a8:	0e 94 17 09 	call	0x122e	; 0x122e <UltraSonic_Update>
     2ac:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixunssfsi>
     2b0:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <Ultra_u16Dist+0x1>
     2b4:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <Ultra_u16Dist>
		//_delay_ms(600);
	}
	/*Someone is near*/
	H_LED_Void_LedOff(LED_RED);
	H_Buzzer_Void_BuzzerOff();
	while(Ultra_u16Dist < 10)
     2b8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <Ultra_u16Dist>
     2bc:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <Ultra_u16Dist+0x1>
     2c0:	0a 97       	sbiw	r24, 0x0a	; 10
     2c2:	90 f3       	brcs	.-28     	; 0x2a8 <Factory_voidPanicModeOn+0x3a>
	{
		Ultra_u16Dist = UltraSonic_Update();
		//_delay_ms(600);
	}
	MCAL_EXTI_voidEnableInterrupt(EXTI_INT1,EXTI_FALLING_EDGE);
     2c4:	62 e0       	ldi	r22, 0x02	; 2
     2c6:	87 e0       	ldi	r24, 0x07	; 7
     2c8:	0e 94 04 0c 	call	0x1808	; 0x1808 <MCAL_EXTI_voidEnableInterrupt>
	APP_Pannel = NORMAL;
     2cc:	85 e0       	ldi	r24, 0x05	; 5
     2ce:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <APP_Pannel>
     2d2:	08 95       	ret

000002d4 <Factory_voidReadLogs>:
	}
	EEPROM_Send(EEPROM_OFFSET,Log_u16Offset); /*Assumption that offset won't exceed 255 (Not real situation)*/
}

static void Factory_voidReadLogs(u8* Copy_pu8Log)
{
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	1f 92       	push	r1
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	7c 01       	movw	r14, r24
	u16 Local_u16Counter=0;
	u8 Local_u8Data=0;
     2e8:	19 82       	std	Y+1, r1	; 0x01
	
	EEPROM_Receive(EEPROM_BASE+Previous_u16Location,&Local_u8Data);
     2ea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     2ee:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	05 96       	adiw	r24, 0x05	; 5
     2fa:	0e 94 df 0b 	call	0x17be	; 0x17be <EEPROM_Receive>
	if(0xff == Local_u8Data)
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	8f 3f       	cpi	r24, 0xFF	; 255
     302:	b1 f5       	brne	.+108    	; 0x370 <Factory_voidReadLogs+0x9c>
	{
		/*No new Data exit*/
		Copy_pu8Log[0] = '\0';
     304:	f7 01       	movw	r30, r14
     306:	10 82       	st	Z, r1
     308:	48 c0       	rjmp	.+144    	; 0x39a <Factory_voidReadLogs+0xc6>
	}
	else
	{
		while(Local_u8Data != '\0')
		{
			Copy_pu8Log[Local_u16Counter] = Local_u8Data;
     30a:	f7 01       	movw	r30, r14
     30c:	e0 0f       	add	r30, r16
     30e:	f1 1f       	adc	r31, r17
     310:	80 83       	st	Z, r24
			Buffer[Counter]=Local_u8Data;
     312:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter>
     316:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Counter+0x1>
     31a:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <Counter+0x2>
     31e:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <Counter+0x3>
     322:	29 81       	ldd	r18, Y+1	; 0x01
     324:	fc 01       	movw	r30, r24
     326:	e4 5c       	subi	r30, 0xC4	; 196
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	20 83       	st	Z, r18
			Counter++;
     32c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Counter>
     330:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Counter+0x1>
     334:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <Counter+0x2>
     338:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <Counter+0x3>
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	a1 1d       	adc	r26, r1
     340:	b1 1d       	adc	r27, r1
     342:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Counter>
     346:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Counter+0x1>
     34a:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <Counter+0x2>
     34e:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <Counter+0x3>
			Local_u16Counter++;
     352:	0f 5f       	subi	r16, 0xFF	; 255
     354:	1f 4f       	sbci	r17, 0xFF	; 255
			EEPROM_Receive(EEPROM_BASE+Previous_u16Location+Local_u16Counter,&Local_u8Data);
     356:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     35a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     35e:	80 0f       	add	r24, r16
     360:	91 1f       	adc	r25, r17
     362:	be 01       	movw	r22, r28
     364:	6f 5f       	subi	r22, 0xFF	; 255
     366:	7f 4f       	sbci	r23, 0xFF	; 255
     368:	05 96       	adiw	r24, 0x05	; 5
     36a:	0e 94 df 0b 	call	0x17be	; 0x17be <EEPROM_Receive>
     36e:	02 c0       	rjmp	.+4      	; 0x374 <Factory_voidReadLogs+0xa0>
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	10 e0       	ldi	r17, 0x00	; 0
		/*No new Data exit*/
		Copy_pu8Log[0] = '\0';
	}
	else
	{
		while(Local_u8Data != '\0')
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	81 11       	cpse	r24, r1
     378:	c8 cf       	rjmp	.-112    	; 0x30a <Factory_voidReadLogs+0x36>
			Counter++;
			Local_u16Counter++;
			EEPROM_Receive(EEPROM_BASE+Previous_u16Location+Local_u16Counter,&Local_u8Data);
		}
		/*****************************/
		Copy_pu8Log[Local_u16Counter] = Local_u8Data; /*Put null*/
     37a:	f7 01       	movw	r30, r14
     37c:	e0 0f       	add	r30, r16
     37e:	f1 1f       	adc	r31, r17
     380:	80 83       	st	Z, r24
		Previous_u16Location += (Local_u16Counter+1);
     382:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     386:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
     38a:	08 0f       	add	r16, r24
     38c:	19 1f       	adc	r17, r25
     38e:	0f 5f       	subi	r16, 0xFF	; 255
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <__data_end+0x1>
     396:	00 93 36 01 	sts	0x0136, r16	; 0x800136 <__data_end>
	}
	
}
     39a:	0f 90       	pop	r0
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	08 95       	ret

000003aa <Factory_voidShowLogs>:
		break;
	}
}

static void Factory_voidShowLogs(void)
{
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	c8 55       	subi	r28, 0x58	; 88
     3c8:	d1 09       	sbc	r29, r1
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
	
	u8 Local_u8LCDLines[4][20] ={{'1'}}; 
     3d4:	fe 01       	movw	r30, r28
     3d6:	31 96       	adiw	r30, 0x01	; 1
     3d8:	80 e5       	ldi	r24, 0x50	; 80
     3da:	df 01       	movw	r26, r30
     3dc:	1d 92       	st	X+, r1
     3de:	8a 95       	dec	r24
     3e0:	e9 f7       	brne	.-6      	; 0x3dc <Factory_voidShowLogs+0x32>
     3e2:	81 e3       	ldi	r24, 0x31	; 49
     3e4:	89 83       	std	Y+1, r24	; 0x01
	u8 *Local_pu8ArrayOfP[4] = {&Local_u8LCDLines[0],&Local_u8LCDLines[1],&Local_u8LCDLines[2],&Local_u8LCDLines[3]};
     3e6:	63 96       	adiw	r28, 0x13	; 19
     3e8:	ff af       	std	Y+63, r31	; 0x3f
     3ea:	ee af       	std	Y+62, r30	; 0x3e
     3ec:	63 97       	sbiw	r28, 0x13	; 19
     3ee:	ce 01       	movw	r24, r28
     3f0:	45 96       	adiw	r24, 0x15	; 21
     3f2:	65 96       	adiw	r28, 0x15	; 21
     3f4:	9f af       	std	Y+63, r25	; 0x3f
     3f6:	8e af       	std	Y+62, r24	; 0x3e
     3f8:	65 97       	sbiw	r28, 0x15	; 21
     3fa:	44 96       	adiw	r24, 0x14	; 20
     3fc:	67 96       	adiw	r28, 0x17	; 23
     3fe:	9f af       	std	Y+63, r25	; 0x3f
     400:	8e af       	std	Y+62, r24	; 0x3e
     402:	67 97       	sbiw	r28, 0x17	; 23
     404:	44 96       	adiw	r24, 0x14	; 20
     406:	69 96       	adiw	r28, 0x19	; 25
     408:	9f af       	std	Y+63, r25	; 0x3f
     40a:	8e af       	std	Y+62, r24	; 0x3e
     40c:	69 97       	sbiw	r28, 0x19	; 25
	u8 Local_u8PointerCounter=0;
	u32 Local_u32EEPROMCounter=0;
	u8 Local_u8LCDLine=0;
     40e:	10 e0       	ldi	r17, 0x00	; 0
static void Factory_voidShowLogs(void)
{
	
	u8 Local_u8LCDLines[4][20] ={{'1'}}; 
	u8 *Local_pu8ArrayOfP[4] = {&Local_u8LCDLines[0],&Local_u8LCDLines[1],&Local_u8LCDLines[2],&Local_u8LCDLines[3]};
	u8 Local_u8PointerCounter=0;
     410:	00 e0       	ldi	r16, 0x00	; 0
	u32 Local_u32EEPROMCounter=0;
	u8 Local_u8LCDLine=0;
	while(PUSH_BUTTON_RELEASED == H_PushButton_U8_PushButtonRead(PUSH_BUTTON_3))
     412:	84 c0       	rjmp	.+264    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
	{
		if(4 > Local_u8LCDLine)
     414:	14 30       	cpi	r17, 0x04	; 4
     416:	58 f4       	brcc	.+22     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{
			Factory_voidReadLogs(Local_u8LCDLines[Local_u8LCDLine]);
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	8c 0f       	add	r24, r28
     41e:	9d 1f       	adc	r25, r29
     420:	b4 e1       	ldi	r27, 0x14	; 20
     422:	1b 9f       	mul	r17, r27
     424:	80 0d       	add	r24, r0
     426:	91 1d       	adc	r25, r1
     428:	11 24       	eor	r1, r1
     42a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Factory_voidReadLogs>
		}
		else{;}
		
		/* Array is filled Display on LCD */
		if((4 == Local_u8LCDLine) || ('\0' == Local_u8LCDLines[Local_u8LCDLine][0]))
     42e:	14 30       	cpi	r17, 0x04	; 4
     430:	89 f0       	breq	.+34     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     432:	e1 2e       	mov	r14, r17
     434:	f1 2c       	mov	r15, r1
     436:	84 e1       	ldi	r24, 0x14	; 20
     438:	8e 9d       	mul	r24, r14
     43a:	f0 01       	movw	r30, r0
     43c:	8f 9d       	mul	r24, r15
     43e:	f0 0d       	add	r31, r0
     440:	11 24       	eor	r1, r1
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	8c 0f       	add	r24, r28
     448:	9d 1f       	adc	r25, r29
     44a:	e8 0f       	add	r30, r24
     44c:	f9 1f       	adc	r31, r25
     44e:	80 81       	ld	r24, Z
     450:	81 11       	cpse	r24, r1
     452:	53 c0       	rjmp	.+166    	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
		{
			if((PUSH_BUTTON_PRESSED == H_PushButton_U8_PushButtonRead(PUSH_BUTTON_2)) && (Local_u8LCDLine >= 4))
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     45a:	81 11       	cpse	r24, r1
     45c:	5f c0       	rjmp	.+190    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     45e:	14 30       	cpi	r17, 0x04	; 4
     460:	08 f4       	brcc	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     462:	5c c0       	rjmp	.+184    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
			{
				/*Scroll Down*/
				/*1- Swap Pointers*/
				Local_pu8ArrayOfP[0] = Local_pu8ArrayOfP[1];
     464:	65 96       	adiw	r28, 0x15	; 21
     466:	8e ac       	ldd	r8, Y+62	; 0x3e
     468:	9f ac       	ldd	r9, Y+63	; 0x3f
     46a:	65 97       	sbiw	r28, 0x15	; 21
     46c:	63 96       	adiw	r28, 0x13	; 19
     46e:	9f ae       	std	Y+63, r9	; 0x3f
     470:	8e ae       	std	Y+62, r8	; 0x3e
     472:	63 97       	sbiw	r28, 0x13	; 19
				Local_pu8ArrayOfP[1] = Local_pu8ArrayOfP[2];
     474:	67 96       	adiw	r28, 0x17	; 23
     476:	ae ac       	ldd	r10, Y+62	; 0x3e
     478:	bf ac       	ldd	r11, Y+63	; 0x3f
     47a:	67 97       	sbiw	r28, 0x17	; 23
     47c:	65 96       	adiw	r28, 0x15	; 21
     47e:	bf ae       	std	Y+63, r11	; 0x3f
     480:	ae ae       	std	Y+62, r10	; 0x3e
     482:	65 97       	sbiw	r28, 0x15	; 21
				Local_pu8ArrayOfP[2] = Local_pu8ArrayOfP[3];
     484:	69 96       	adiw	r28, 0x19	; 25
     486:	ce ac       	ldd	r12, Y+62	; 0x3e
     488:	df ac       	ldd	r13, Y+63	; 0x3f
     48a:	69 97       	sbiw	r28, 0x19	; 25
     48c:	67 96       	adiw	r28, 0x17	; 23
     48e:	df ae       	std	Y+63, r13	; 0x3f
     490:	ce ae       	std	Y+62, r12	; 0x3e
     492:	67 97       	sbiw	r28, 0x17	; 23
				Local_pu8ArrayOfP[3] = Local_u8LCDLines[Local_u8PointerCounter];
     494:	ee 24       	eor	r14, r14
     496:	e3 94       	inc	r14
     498:	f1 2c       	mov	r15, r1
     49a:	ec 0e       	add	r14, r28
     49c:	fd 1e       	adc	r15, r29
     49e:	94 e1       	ldi	r25, 0x14	; 20
     4a0:	09 9f       	mul	r16, r25
     4a2:	e0 0c       	add	r14, r0
     4a4:	f1 1c       	adc	r15, r1
     4a6:	11 24       	eor	r1, r1
     4a8:	69 96       	adiw	r28, 0x19	; 25
     4aa:	ff ae       	std	Y+63, r15	; 0x3f
     4ac:	ee ae       	std	Y+62, r14	; 0x3e
     4ae:	69 97       	sbiw	r28, 0x19	; 25
				Local_u8PointerCounter++;
     4b0:	0f 5f       	subi	r16, 0xFF	; 255
				Local_u8PointerCounter = Local_u8PointerCounter %4;
     4b2:	03 70       	andi	r16, 0x03	; 3
				Factory_voidReadLogs(Local_pu8ArrayOfP[3]);
     4b4:	c7 01       	movw	r24, r14
     4b6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Factory_voidReadLogs>
				if(('\0' == Local_u8LCDLines[3][0]))
     4ba:	8d ad       	ldd	r24, Y+61	; 0x3d
     4bc:	88 23       	and	r24, r24
     4be:	71 f1       	breq	.+92     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
				{
					/*Nothing to display more*/
				}
				else
				{
					H_Lcd_Void_LCDGoTo(0,0);
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteString(Local_pu8ArrayOfP[0]);
     4c8:	c4 01       	movw	r24, r8
     4ca:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
					H_Lcd_Void_LCDGoTo(1,0);
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteString(Local_pu8ArrayOfP[1]);
     4d6:	c5 01       	movw	r24, r10
     4d8:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
					H_Lcd_Void_LCDGoTo(2,0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteString(Local_pu8ArrayOfP[2]);
     4e4:	c6 01       	movw	r24, r12
     4e6:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
					H_Lcd_Void_LCDGoTo(3,0);
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteString(Local_pu8ArrayOfP[3]);
     4f2:	c7 01       	movw	r24, r14
     4f4:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
     4f8:	11 c0       	rjmp	.+34     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
			
		}
		else
		{
			
			H_Lcd_Void_LCDGoTo(Local_u8LCDLine,0);
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	81 2f       	mov	r24, r17
     4fe:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(Local_pu8ArrayOfP[Local_u8LCDLine]);
     502:	ee 0c       	add	r14, r14
     504:	ff 1c       	adc	r15, r15
     506:	e1 e5       	ldi	r30, 0x51	; 81
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	ec 0f       	add	r30, r28
     50c:	fd 1f       	adc	r31, r29
     50e:	ee 0d       	add	r30, r14
     510:	ff 1d       	adc	r31, r15
     512:	80 81       	ld	r24, Z
     514:	91 81       	ldd	r25, Z+1	; 0x01
     516:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			Local_u8LCDLine++;
     51a:	1f 5f       	subi	r17, 0xFF	; 255
	u8 Local_u8LCDLines[4][20] ={{'1'}}; 
	u8 *Local_pu8ArrayOfP[4] = {&Local_u8LCDLines[0],&Local_u8LCDLines[1],&Local_u8LCDLines[2],&Local_u8LCDLines[3]};
	u8 Local_u8PointerCounter=0;
	u32 Local_u32EEPROMCounter=0;
	u8 Local_u8LCDLine=0;
	while(PUSH_BUTTON_RELEASED == H_PushButton_U8_PushButtonRead(PUSH_BUTTON_3))
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	09 f4       	brne	.+2      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     526:	76 cf       	rjmp	.-276    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		}
		
		
	}
	
     528:	c8 5a       	subi	r28, 0xA8	; 168
     52a:	df 4f       	sbci	r29, 0xFF	; 255
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	bf 90       	pop	r11
     548:	af 90       	pop	r10
     54a:	9f 90       	pop	r9
     54c:	8f 90       	pop	r8
     54e:	08 95       	ret

00000550 <Factory_voidDisplayLogs>:
}

static void Factory_voidDisplayLogs(void)
{
	u8 Local_u8OptionFlag=0;
	H_Lcd_Void_LCDClear();
     550:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     554:	8f e3       	ldi	r24, 0x3F	; 63
     556:	9f e1       	ldi	r25, 0x1F	; 31
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <Factory_voidDisplayLogs+0x8>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <Factory_voidDisplayLogs+0xe>
     55e:	00 00       	nop
	_delay_ms(2);
	H_Lcd_Void_LCDGoTo(0,0);
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Display Logs?");
     568:	85 ec       	ldi	r24, 0xC5	; 197
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Press PB4 for Yes");
     578:	83 ed       	ldi	r24, 0xD3	; 211
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(2,0);
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString("Press PB0 for No");
     588:	85 ee       	ldi	r24, 0xE5	; 229
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
	/******** wait responce ************/
	for(;;) /*Infinity*/
	{
		if(PUSH_BUTTON_PRESSED ==  H_PushButton_U8_PushButtonRead(PUSH_BUTTON_0))
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     596:	88 23       	and	r24, r24
     598:	39 f0       	breq	.+14     	; 0x5a8 <Factory_voidDisplayLogs+0x58>
			Local_u8OptionFlag=0;
			break;
		}
		else
		{;}
		if(PUSH_BUTTON_PRESSED ==  H_PushButton_U8_PushButtonRead(PUSH_BUTTON_3))
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	0e 94 8e 08 	call	0x111c	; 0x111c <H_PushButton_U8_PushButtonRead>
     5a0:	81 11       	cpse	r24, r1
     5a2:	f6 cf       	rjmp	.-20     	; 0x590 <Factory_voidDisplayLogs+0x40>
		{
			/*Yes*/
			Local_u8OptionFlag=1;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <Factory_voidDisplayLogs+0x5a>
	for(;;) /*Infinity*/
	{
		if(PUSH_BUTTON_PRESSED ==  H_PushButton_U8_PushButtonRead(PUSH_BUTTON_0))
		{
			/*No*/
			Local_u8OptionFlag=0;
     5a8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		else
		{;}
	}
	switch(Local_u8OptionFlag)
     5aa:	88 23       	and	r24, r24
     5ac:	a9 f0       	breq	.+42     	; 0x5d8 <Factory_voidDisplayLogs+0x88>
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	d9 f4       	brne	.+54     	; 0x5e8 <Factory_voidDisplayLogs+0x98>
	{
	case YES:
		/*Call Show Logs*/
		H_Lcd_Void_LCDClear();
     5b2:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     5b6:	8f e3       	ldi	r24, 0x3F	; 63
     5b8:	9f e1       	ldi	r25, 0x1F	; 31
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <Factory_voidDisplayLogs+0x6a>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <Factory_voidDisplayLogs+0x70>
     5c0:	00 00       	nop
		_delay_ms(2);
		Factory_voidShowLogs();
     5c2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Factory_voidShowLogs>
		H_Lcd_Void_LCDClear();
     5c6:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     5ca:	8f e3       	ldi	r24, 0x3F	; 63
     5cc:	9f e1       	ldi	r25, 0x1F	; 31
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <Factory_voidDisplayLogs+0x7e>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <Factory_voidDisplayLogs+0x84>
     5d4:	00 00       	nop
     5d6:	08 95       	ret
		_delay_ms(2);
		break;
	case NO:
		/*Nothing*/
		H_Lcd_Void_LCDClear();
     5d8:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     5dc:	8f e3       	ldi	r24, 0x3F	; 63
     5de:	9f e1       	ldi	r25, 0x1F	; 31
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <Factory_voidDisplayLogs+0x90>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <Factory_voidDisplayLogs+0x96>
     5e6:	00 00       	nop
     5e8:	08 95       	ret

000005ea <Factory_voidSaveLogs>:
		H_Lcd_Void_LCDGoTo(Copy_Gas->Row,Copy_Gas->Colum);
		H_Lcd_Void_LCDWriteString(Copy_Gas->Name);
}

static void Factory_voidSaveLogs(u8 *Copy_pu8String, u32 Copy_u32Data)
{
     5ea:	8f 92       	push	r8
     5ec:	9f 92       	push	r9
     5ee:	af 92       	push	r10
     5f0:	bf 92       	push	r11
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	ef 92       	push	r14
     5f8:	ff 92       	push	r15
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	00 d0       	rcall	.+0      	; 0x604 <Factory_voidSaveLogs+0x1a>
     604:	00 d0       	rcall	.+0      	; 0x606 <Factory_voidSaveLogs+0x1c>
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	6c 01       	movw	r12, r24
     60e:	4a 01       	movw	r8, r20
     610:	5b 01       	movw	r10, r22
	u16 Local_u16EEPROMCounter=0;
	s16 Local_s16TempCounter=0;
	u8  Local_u8TempArray[5]={0};
     612:	fe 01       	movw	r30, r28
     614:	31 96       	adiw	r30, 0x01	; 1
     616:	85 e0       	ldi	r24, 0x05	; 5
     618:	df 01       	movw	r26, r30
     61a:	1d 92       	st	X+, r1
     61c:	8a 95       	dec	r24
     61e:	e9 f7       	brne	.-6      	; 0x61a <Factory_voidSaveLogs+0x30>
	u16 Local_u16CurrentOffset=0;
	EEPROM_Receive(EEPROM_OFFSET,(u8*)&Log_u16Offset);
     620:	62 ea       	ldi	r22, 0xA2	; 162
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 df 0b 	call	0x17be	; 0x17be <EEPROM_Receive>
	if(0xff == Log_u16Offset)
     62c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Log_u16Offset>
     630:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <Log_u16Offset+0x1>
     634:	8f 3f       	cpi	r24, 0xFF	; 255
     636:	91 05       	cpc	r25, r1
     638:	21 f4       	brne	.+8      	; 0x642 <Factory_voidSaveLogs+0x58>
	{
		Log_u16Offset =0;
     63a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <Log_u16Offset+0x1>
     63e:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Log_u16Offset>
	}
	else{;}
	Local_u16CurrentOffset = Log_u16Offset;
     642:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <Log_u16Offset>
     646:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <Log_u16Offset+0x1>
	/*****************************************************************************************************/
	for(Local_u16EEPROMCounter=0;Copy_pu8String[Local_u16EEPROMCounter] != '\0';Local_u16EEPROMCounter++)
     64a:	00 e0       	ldi	r16, 0x00	; 0
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	11 c0       	rjmp	.+34     	; 0x672 <Factory_voidSaveLogs+0x88>
	{
		EEPROM_Send(EEPROM_BASE+Local_u16CurrentOffset+Local_u16EEPROMCounter,Copy_pu8String[Local_u16EEPROMCounter]);
     650:	c8 01       	movw	r24, r16
     652:	8e 0d       	add	r24, r14
     654:	9f 1d       	adc	r25, r15
     656:	05 96       	adiw	r24, 0x05	; 5
     658:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <EEPROM_Send>
		Log_u16Offset++;
     65c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Log_u16Offset>
     660:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <Log_u16Offset+0x1>
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <Log_u16Offset+0x1>
     66a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <Log_u16Offset>
		Log_u16Offset =0;
	}
	else{;}
	Local_u16CurrentOffset = Log_u16Offset;
	/*****************************************************************************************************/
	for(Local_u16EEPROMCounter=0;Copy_pu8String[Local_u16EEPROMCounter] != '\0';Local_u16EEPROMCounter++)
     66e:	0f 5f       	subi	r16, 0xFF	; 255
     670:	1f 4f       	sbci	r17, 0xFF	; 255
     672:	f6 01       	movw	r30, r12
     674:	e0 0f       	add	r30, r16
     676:	f1 1f       	adc	r31, r17
     678:	60 81       	ld	r22, Z
     67a:	61 11       	cpse	r22, r1
     67c:	e9 cf       	rjmp	.-46     	; 0x650 <Factory_voidSaveLogs+0x66>
     67e:	c1 2c       	mov	r12, r1
     680:	d1 2c       	mov	r13, r1
     682:	17 c0       	rjmp	.+46     	; 0x6b2 <Factory_voidSaveLogs+0xc8>
		EEPROM_Send(EEPROM_BASE+Local_u16CurrentOffset+Local_u16EEPROMCounter,Copy_pu8String[Local_u16EEPROMCounter]);
		Log_u16Offset++;
	}
	while(Copy_u32Data)
	{
		Local_u8TempArray[Local_s16TempCounter] = (Copy_u32Data % 10) +'0';
     684:	c5 01       	movw	r24, r10
     686:	b4 01       	movw	r22, r8
     688:	2a e0       	ldi	r18, 0x0A	; 10
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__udivmodsi4>
     694:	e1 e0       	ldi	r30, 0x01	; 1
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ec 0f       	add	r30, r28
     69a:	fd 1f       	adc	r31, r29
     69c:	ec 0d       	add	r30, r12
     69e:	fd 1d       	adc	r31, r13
     6a0:	60 5d       	subi	r22, 0xD0	; 208
     6a2:	60 83       	st	Z, r22
		Local_s16TempCounter++;
     6a4:	bf ef       	ldi	r27, 0xFF	; 255
     6a6:	cb 1a       	sub	r12, r27
     6a8:	db 0a       	sbc	r13, r27
		Copy_u32Data /=10;
     6aa:	82 2e       	mov	r8, r18
     6ac:	93 2e       	mov	r9, r19
     6ae:	a4 2e       	mov	r10, r20
     6b0:	b5 2e       	mov	r11, r21
	for(Local_u16EEPROMCounter=0;Copy_pu8String[Local_u16EEPROMCounter] != '\0';Local_u16EEPROMCounter++)
	{
		EEPROM_Send(EEPROM_BASE+Local_u16CurrentOffset+Local_u16EEPROMCounter,Copy_pu8String[Local_u16EEPROMCounter]);
		Log_u16Offset++;
	}
	while(Copy_u32Data)
     6b2:	81 14       	cp	r8, r1
     6b4:	91 04       	cpc	r9, r1
     6b6:	a1 04       	cpc	r10, r1
     6b8:	b1 04       	cpc	r11, r1
     6ba:	21 f7       	brne	.-56     	; 0x684 <Factory_voidSaveLogs+0x9a>
	{
		Local_u8TempArray[Local_s16TempCounter] = (Copy_u32Data % 10) +'0';
		Local_s16TempCounter++;
		Copy_u32Data /=10;
	}
	Local_s16TempCounter--;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	c8 1a       	sub	r12, r24
     6c0:	d1 08       	sbc	r13, r1
	while(Local_s16TempCounter >= 0)
     6c2:	1b c0       	rjmp	.+54     	; 0x6fa <Factory_voidSaveLogs+0x110>
	{
		EEPROM_Send(EEPROM_BASE+Local_u16CurrentOffset+Local_u16EEPROMCounter,Local_u8TempArray[Local_s16TempCounter]);
     6c4:	c8 01       	movw	r24, r16
     6c6:	8e 0d       	add	r24, r14
     6c8:	9f 1d       	adc	r25, r15
     6ca:	e1 e0       	ldi	r30, 0x01	; 1
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	ec 0f       	add	r30, r28
     6d0:	fd 1f       	adc	r31, r29
     6d2:	ec 0d       	add	r30, r12
     6d4:	fd 1d       	adc	r31, r13
     6d6:	60 81       	ld	r22, Z
     6d8:	05 96       	adiw	r24, 0x05	; 5
     6da:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <EEPROM_Send>
		Local_s16TempCounter--;
     6de:	a1 e0       	ldi	r26, 0x01	; 1
     6e0:	ca 1a       	sub	r12, r26
     6e2:	d1 08       	sbc	r13, r1
		Local_u16EEPROMCounter++;
     6e4:	0f 5f       	subi	r16, 0xFF	; 255
     6e6:	1f 4f       	sbci	r17, 0xFF	; 255
		Log_u16Offset++;
     6e8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <Log_u16Offset>
     6ec:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <Log_u16Offset+0x1>
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <Log_u16Offset+0x1>
     6f6:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <Log_u16Offset>
		Local_u8TempArray[Local_s16TempCounter] = (Copy_u32Data % 10) +'0';
		Local_s16TempCounter++;
		Copy_u32Data /=10;
	}
	Local_s16TempCounter--;
	while(Local_s16TempCounter >= 0)
     6fa:	dd 20       	and	r13, r13
     6fc:	1c f7       	brge	.-58     	; 0x6c4 <Factory_voidSaveLogs+0xda>
		EEPROM_Send(EEPROM_BASE+Local_u16CurrentOffset+Local_u16EEPROMCounter,Local_u8TempArray[Local_s16TempCounter]);
		Local_s16TempCounter--;
		Local_u16EEPROMCounter++;
		Log_u16Offset++;
	}
	EEPROM_Send(EEPROM_BASE+Local_u16CurrentOffset+Local_u16EEPROMCounter,'\0');
     6fe:	0e 0d       	add	r16, r14
     700:	1f 1d       	adc	r17, r15
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	c8 01       	movw	r24, r16
     706:	05 96       	adiw	r24, 0x05	; 5
     708:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <EEPROM_Send>
	/***********Update Offset in EEPROM***************/
	Log_u16Offset = Local_u16CurrentOffset + Local_u16EEPROMCounter+1;
     70c:	0f 5f       	subi	r16, 0xFF	; 255
     70e:	1f 4f       	sbci	r17, 0xFF	; 255
     710:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <Log_u16Offset+0x1>
     714:	00 93 a2 01 	sts	0x01A2, r16	; 0x8001a2 <Log_u16Offset>
	if(255 <= Log_u16Offset)
     718:	0f 3f       	cpi	r16, 0xFF	; 255
     71a:	11 05       	cpc	r17, r1
     71c:	20 f0       	brcs	.+8      	; 0x726 <Factory_voidSaveLogs+0x13c>
	{
		Log_u16Offset =0;
     71e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <Log_u16Offset+0x1>
     722:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <Log_u16Offset>
	}
	else
	{
		;
	}
	EEPROM_Send(EEPROM_OFFSET,Log_u16Offset); /*Assumption that offset won't exceed 255 (Not real situation)*/
     726:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <Log_u16Offset>
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <EEPROM_Send>
}
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	df 90       	pop	r13
     74a:	cf 90       	pop	r12
     74c:	bf 90       	pop	r11
     74e:	af 90       	pop	r10
     750:	9f 90       	pop	r9
     752:	8f 90       	pop	r8
     754:	08 95       	ret

00000756 <APP_Factory_voidInit>:


void APP_Factory_voidInit(void)
{
	/**** ADC Init ******/
	ADC_Init(ADC_VCCREF,DIV_128);
     756:	67 e0       	ldi	r22, 0x07	; 7
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 a6 09 	call	0x134c	; 0x134c <ADC_Init>
	/*********************/
	/**** EXTI Init ******/
	MCAL_EXTI_voidInitINT1(EXTI_FALLING_EDGE);
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MCAL_EXTI_voidInitINT1>
	MCAL_EXTI_voidSetCallBack(EXTI_INT1,&Factory_voidMode);
     764:	69 e4       	ldi	r22, 0x49	; 73
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	87 e0       	ldi	r24, 0x07	; 7
     76a:	0e 94 49 0c 	call	0x1892	; 0x1892 <MCAL_EXTI_voidSetCallBack>
	/*********************/
	/**** Push butttons init ******/
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_0);
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 72 08 	call	0x10e4	; 0x10e4 <H_PushButton_Void_PushButtonInit>
	//H_PushButton_Void_PushButtonInit(PUSH_BUTTON_1);
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_2);
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0e 94 72 08 	call	0x10e4	; 0x10e4 <H_PushButton_Void_PushButtonInit>
	H_PushButton_Void_PushButtonInit(PUSH_BUTTON_3);
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <H_PushButton_Void_PushButtonInit>
	/*********************/
	
	/**** LCD Init ******/
	H_Lcd_Void_LCDInit();
     780:	0e 94 3d 07 	call	0xe7a	; 0xe7a <H_Lcd_Void_LCDInit>
	/*********************/
	
	/**** Sensors Init ******/
	HAL_MQ_voidInit();
     784:	0e 94 74 06 	call	0xce8	; 0xce8 <HAL_MQ_voidInit>
	LM35_Void_Init();
     788:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <LM35_Void_Init>
	/*********************/
	
	/**** UltraSonic Init ******/
	UltraSonic_Init();
     78c:	0e 94 11 09 	call	0x1222	; 0x1222 <UltraSonic_Init>
	/*********************/
	
	/**** LED Init ******/
	H_LED_Void_LedInit(LED_RED);
     790:	84 e0       	ldi	r24, 0x04	; 4
     792:	0e 94 fd 07 	call	0xffa	; 0xffa <H_LED_Void_LedInit>
	/*********************/
	
	/**** Buzzer Init ******/
	H_Buzzer_Void_BuzzerInit();
     796:	0e 94 65 06 	call	0xcca	; 0xcca <H_Buzzer_Void_BuzzerInit>
	/*********************/
	
	/**** Enable Interrupts ******/
	GIE();
     79a:	78 94       	sei
     79c:	08 95       	ret

0000079e <APP_Factory_voidStart>:
	/*********************/
}

void APP_Factory_voidStart(void)
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	c0 55       	subi	r28, 0x50	; 80
     7a8:	d1 09       	sbc	r29, r1
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
	/*************************************************************************/
	u32 Local_u32Temp			 =0;
	u32 Local_u32GasPrecentage	 =0;
	u32 Local_u32Humditiy		 =0;
	/**************************Profile one vars******************************/
	LCD_Profile_Data_t P1_Temp= {.Name ="Temp:",.Row=0,.Colum=0,.Value=35};
     7b4:	88 e0       	ldi	r24, 0x08	; 8
     7b6:	e0 e6       	ldi	r30, 0x60	; 96
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	de 01       	movw	r26, r28
     7bc:	11 96       	adiw	r26, 0x01	; 1
     7be:	01 90       	ld	r0, Z+
     7c0:	0d 92       	st	X+, r0
     7c2:	8a 95       	dec	r24
     7c4:	e1 f7       	brne	.-8      	; 0x7be <APP_Factory_voidStart+0x20>
	LCD_Profile_Data_t P1_Humd= {.Name ="Humidity:",.Row=1,.Colum=0,.Value=70};
     7c6:	88 e0       	ldi	r24, 0x08	; 8
     7c8:	e8 e6       	ldi	r30, 0x68	; 104
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	de 01       	movw	r26, r28
     7ce:	19 96       	adiw	r26, 0x09	; 9
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	8a 95       	dec	r24
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <APP_Factory_voidStart+0x32>
	LCD_Profile_Data_t P1_Gas= {.Name = "Gas:",.Row=2,.Colum=0,.Value=80};
     7d8:	88 e0       	ldi	r24, 0x08	; 8
     7da:	e0 e7       	ldi	r30, 0x70	; 112
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	de 01       	movw	r26, r28
     7e0:	51 96       	adiw	r26, 0x11	; 17
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <APP_Factory_voidStart+0x44>
	/**************************Profile Two vars*************************************/	
	LCD_Profile_Data_t P2_Temp= {.Name ="Temp:",.Row=0,.Colum=0,.Value=0};
     7ea:	86 ef       	ldi	r24, 0xF6	; 246
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9a 8f       	std	Y+26, r25	; 0x1a
     7f0:	89 8f       	std	Y+25, r24	; 0x19
     7f2:	1b 8e       	std	Y+27, r1	; 0x1b
     7f4:	1c 8e       	std	Y+28, r1	; 0x1c
     7f6:	1d 8e       	std	Y+29, r1	; 0x1d
     7f8:	1e 8e       	std	Y+30, r1	; 0x1e
     7fa:	1f 8e       	std	Y+31, r1	; 0x1f
     7fc:	18 a2       	std	Y+32, r1	; 0x20
	LCD_Profile_Data_t P2_Humd= {.Name ="Humidity:",.Row=1,.Colum=0,.Value=0};
     7fe:	28 e0       	ldi	r18, 0x08	; 8
     800:	e8 e7       	ldi	r30, 0x78	; 120
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	de 01       	movw	r26, r28
     806:	91 96       	adiw	r26, 0x21	; 33
     808:	01 90       	ld	r0, Z+
     80a:	0d 92       	st	X+, r0
     80c:	2a 95       	dec	r18
     80e:	e1 f7       	brne	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	LCD_Profile_Data_t P2_Gas= {.Name = "Gas:",.Row=2,.Colum=0,.Value=0};
     810:	28 e0       	ldi	r18, 0x08	; 8
     812:	e0 e8       	ldi	r30, 0x80	; 128
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	de 01       	movw	r26, r28
     818:	99 96       	adiw	r26, 0x29	; 41
     81a:	01 90       	ld	r0, Z+
     81c:	0d 92       	st	X+, r0
     81e:	2a 95       	dec	r18
     820:	e1 f7       	brne	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	/***************************Profile Three vars******************************/	
	LCD_Profile_Data_t P3_Temp= {.Name ="Temp:",.Row=0,.Colum=0,.Value=0};
     822:	9a ab       	std	Y+50, r25	; 0x32
     824:	89 ab       	std	Y+49, r24	; 0x31
     826:	1b aa       	std	Y+51, r1	; 0x33
     828:	1c aa       	std	Y+52, r1	; 0x34
     82a:	1d aa       	std	Y+53, r1	; 0x35
     82c:	1e aa       	std	Y+54, r1	; 0x36
     82e:	1f aa       	std	Y+55, r1	; 0x37
     830:	18 ae       	std	Y+56, r1	; 0x38
	LCD_Profile_Data_t P3_Humd= {.Name ="Humidity:",.Row=1,.Colum=0,.Value=0};
     832:	88 e0       	ldi	r24, 0x08	; 8
     834:	e8 e7       	ldi	r30, 0x78	; 120
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	de 01       	movw	r26, r28
     83a:	d9 96       	adiw	r26, 0x39	; 57
     83c:	01 90       	ld	r0, Z+
     83e:	0d 92       	st	X+, r0
     840:	8a 95       	dec	r24
     842:	e1 f7       	brne	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
	LCD_Profile_Data_t P3_Gas= {.Name = "Gas:",.Row=2,.Colum=0,.Value=0};
     844:	88 e0       	ldi	r24, 0x08	; 8
     846:	e0 e8       	ldi	r30, 0x80	; 128
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	de 01       	movw	r26, r28
     84c:	af 5b       	subi	r26, 0xBF	; 191
     84e:	bf 4f       	sbci	r27, 0xFF	; 255
     850:	01 90       	ld	r0, Z+
     852:	0d 92       	st	X+, r0
     854:	8a 95       	dec	r24
     856:	e1 f7       	brne	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	u8 Local_u8OneTimeFlag		 =0;
	
	/*************************************************************************/
	u32 Local_u32ThresholdTemp   =0;
	u32 Local_u32ThresholdGas    =0;
	u32 Local_u32ThresholdHumdt  =0;
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	1c ae       	std	Y+60, r1	; 0x3c
     85c:	1d ae       	std	Y+61, r1	; 0x3d
     85e:	1e ae       	std	Y+62, r1	; 0x3e
     860:	1f ae       	std	Y+63, r1	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17

	u8 Local_u8OneTimeFlag		 =0;
	
	/*************************************************************************/
	u32 Local_u32ThresholdTemp   =0;
	u32 Local_u32ThresholdGas    =0;
     864:	2d 96       	adiw	r28, 0x0d	; 13
     866:	1c ae       	std	Y+60, r1	; 0x3c
     868:	1d ae       	std	Y+61, r1	; 0x3d
     86a:	1e ae       	std	Y+62, r1	; 0x3e
     86c:	1f ae       	std	Y+63, r1	; 0x3f
     86e:	2d 97       	sbiw	r28, 0x0d	; 13


	u8 Local_u8OneTimeFlag		 =0;
	
	/*************************************************************************/
	u32 Local_u32ThresholdTemp   =0;
     870:	41 2c       	mov	r4, r1
     872:	51 2c       	mov	r5, r1
     874:	32 01       	movw	r6, r4
	LCD_Profile_Data_t P3_Temp= {.Name ="Temp:",.Row=0,.Colum=0,.Value=0};
	LCD_Profile_Data_t P3_Humd= {.Name ="Humidity:",.Row=1,.Colum=0,.Value=0};
	LCD_Profile_Data_t P3_Gas= {.Name = "Gas:",.Row=2,.Colum=0,.Value=0};
	for(;;) /*Infinity*/
	{
		switch (APP_Pannel)
     876:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	09 f4       	brne	.+2      	; 0x880 <__stack+0x21>
     87e:	ed c0       	rjmp	.+474    	; 0xa5a <__stack+0x1fb>
     880:	30 f4       	brcc	.+12     	; 0x88e <__stack+0x2f>
     882:	88 23       	and	r24, r24
     884:	69 f0       	breq	.+26     	; 0x8a0 <__stack+0x41>
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	09 f4       	brne	.+2      	; 0x88c <__stack+0x2d>
     88a:	96 c0       	rjmp	.+300    	; 0x9b8 <__stack+0x159>
     88c:	f4 cf       	rjmp	.-24     	; 0x876 <__stack+0x17>
     88e:	84 30       	cpi	r24, 0x04	; 4
     890:	09 f4       	brne	.+2      	; 0x894 <__stack+0x35>
     892:	8f c1       	rjmp	.+798    	; 0xbb2 <__stack+0x353>
     894:	08 f4       	brcc	.+2      	; 0x898 <__stack+0x39>
     896:	32 c1       	rjmp	.+612    	; 0xafc <__stack+0x29d>
     898:	85 30       	cpi	r24, 0x05	; 5
     89a:	09 f4       	brne	.+2      	; 0x89e <__stack+0x3f>
     89c:	92 c1       	rjmp	.+804    	; 0xbc2 <__stack+0x363>
     89e:	eb cf       	rjmp	.-42     	; 0x876 <__stack+0x17>
		{
			case MAIN:
			/****************************/
			if((0 == Factory_u8DisplayFlag) && (MAIN == APP_Pannel))
     8a0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Factory_u8DisplayFlag>
     8a4:	81 11       	cpse	r24, r1
     8a6:	17 c0       	rjmp	.+46     	; 0x8d6 <__stack+0x77>
     8a8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     8ac:	81 11       	cpse	r24, r1
     8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <__stack+0x77>
			{
				H_Lcd_Void_LCDClear();
     8b0:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     8b4:	8f e3       	ldi	r24, 0x3F	; 63
     8b6:	9f e1       	ldi	r25, 0x1F	; 31
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__stack+0x59>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
     8be:	00 00       	nop
				_delay_ms(2);
				H_Lcd_Void_LCDGoTo(3,8);
     8c0:	68 e0       	ldi	r22, 0x08	; 8
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("MAIN");
     8c8:	8c ef       	ldi	r24, 0xFC	; 252
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
				Factory_u8DisplayFlag=1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Factory_u8DisplayFlag>
			}
			/********** Let User Choose Programm First ************/
			Factory_voidChoseProgram();
     8d6:	0e 94 83 00 	call	0x106	; 0x106 <Factory_voidChoseProgram>
			/******************************************************/
			if(MAIN == User_Program_Choice)
     8da:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <User_Program_Choice>
     8de:	88 23       	and	r24, r24
     8e0:	51 f2       	breq	.-108    	; 0x876 <__stack+0x17>
				***/
			}
			else
			{
				/*********************************/
				H_Lcd_Void_LCDClear();
     8e2:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     8e6:	af e3       	ldi	r26, 0x3F	; 63
     8e8:	bf e1       	ldi	r27, 0x1F	; 31
     8ea:	11 97       	sbiw	r26, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <__stack+0x8b>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__stack+0x91>
     8f0:	00 00       	nop
				_delay_ms(2);
				H_Lcd_Void_LCDGoTo(3,8);
     8f2:	68 e0       	ldi	r22, 0x08	; 8
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("MAIN");
     8fa:	8c ef       	ldi	r24, 0xFC	; 252
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
				/*********************************/
				switch (User_Program_Choice)
     902:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <User_Program_Choice>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	f1 f0       	breq	.+60     	; 0x946 <__stack+0xe7>
     90a:	83 30       	cpi	r24, 0x03	; 3
     90c:	a9 f1       	breq	.+106    	; 0x978 <__stack+0x119>
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0xb5>
     912:	4e c0       	rjmp	.+156    	; 0x9b0 <__stack+0x151>
				{
				case PROFILE_ONE:
					Local_u32ThresholdTemp = P1_Temp.Value;
     914:	4d 80       	ldd	r4, Y+5	; 0x05
     916:	5e 80       	ldd	r5, Y+6	; 0x06
     918:	6f 80       	ldd	r6, Y+7	; 0x07
     91a:	78 84       	ldd	r7, Y+8	; 0x08
					Local_u32ThresholdGas = P1_Gas.Value;
     91c:	8d 89       	ldd	r24, Y+21	; 0x15
     91e:	9e 89       	ldd	r25, Y+22	; 0x16
     920:	af 89       	ldd	r26, Y+23	; 0x17
     922:	b8 8d       	ldd	r27, Y+24	; 0x18
     924:	2d 96       	adiw	r28, 0x0d	; 13
     926:	8c af       	std	Y+60, r24	; 0x3c
     928:	9d af       	std	Y+61, r25	; 0x3d
     92a:	ae af       	std	Y+62, r26	; 0x3e
     92c:	bf af       	std	Y+63, r27	; 0x3f
     92e:	2d 97       	sbiw	r28, 0x0d	; 13
					Local_u32ThresholdHumdt	  = P1_Humd.Value;
     930:	8d 85       	ldd	r24, Y+13	; 0x0d
     932:	9e 85       	ldd	r25, Y+14	; 0x0e
     934:	af 85       	ldd	r26, Y+15	; 0x0f
     936:	b8 89       	ldd	r27, Y+16	; 0x10
     938:	61 96       	adiw	r28, 0x11	; 17
     93a:	8c af       	std	Y+60, r24	; 0x3c
     93c:	9d af       	std	Y+61, r25	; 0x3d
     93e:	ae af       	std	Y+62, r26	; 0x3e
     940:	bf af       	std	Y+63, r27	; 0x3f
     942:	61 97       	sbiw	r28, 0x11	; 17
					break;
     944:	35 c0       	rjmp	.+106    	; 0x9b0 <__stack+0x151>
				case PROFILE_TWO:
					Local_u32ThresholdTemp = P2_Temp.Value;
     946:	4d 8c       	ldd	r4, Y+29	; 0x1d
     948:	5e 8c       	ldd	r5, Y+30	; 0x1e
     94a:	6f 8c       	ldd	r6, Y+31	; 0x1f
     94c:	78 a0       	ldd	r7, Y+32	; 0x20
					Local_u32ThresholdGas = P2_Gas.Value;
     94e:	8d a5       	ldd	r24, Y+45	; 0x2d
     950:	9e a5       	ldd	r25, Y+46	; 0x2e
     952:	af a5       	ldd	r26, Y+47	; 0x2f
     954:	b8 a9       	ldd	r27, Y+48	; 0x30
     956:	2d 96       	adiw	r28, 0x0d	; 13
     958:	8c af       	std	Y+60, r24	; 0x3c
     95a:	9d af       	std	Y+61, r25	; 0x3d
     95c:	ae af       	std	Y+62, r26	; 0x3e
     95e:	bf af       	std	Y+63, r27	; 0x3f
     960:	2d 97       	sbiw	r28, 0x0d	; 13
					Local_u32ThresholdHumdt	  = P2_Humd.Value;
     962:	8d a1       	ldd	r24, Y+37	; 0x25
     964:	9e a1       	ldd	r25, Y+38	; 0x26
     966:	af a1       	ldd	r26, Y+39	; 0x27
     968:	b8 a5       	ldd	r27, Y+40	; 0x28
     96a:	61 96       	adiw	r28, 0x11	; 17
     96c:	8c af       	std	Y+60, r24	; 0x3c
     96e:	9d af       	std	Y+61, r25	; 0x3d
     970:	ae af       	std	Y+62, r26	; 0x3e
     972:	bf af       	std	Y+63, r27	; 0x3f
     974:	61 97       	sbiw	r28, 0x11	; 17
					break;
     976:	1c c0       	rjmp	.+56     	; 0x9b0 <__stack+0x151>
				case PROFILE_THREE:
					Local_u32ThresholdTemp = P3_Temp.Value;
     978:	4d a8       	ldd	r4, Y+53	; 0x35
     97a:	5e a8       	ldd	r5, Y+54	; 0x36
     97c:	6f a8       	ldd	r6, Y+55	; 0x37
     97e:	78 ac       	ldd	r7, Y+56	; 0x38
					Local_u32ThresholdGas = P3_Gas.Value;
     980:	29 96       	adiw	r28, 0x09	; 9
     982:	8c ad       	ldd	r24, Y+60	; 0x3c
     984:	9d ad       	ldd	r25, Y+61	; 0x3d
     986:	ae ad       	ldd	r26, Y+62	; 0x3e
     988:	bf ad       	ldd	r27, Y+63	; 0x3f
     98a:	29 97       	sbiw	r28, 0x09	; 9
     98c:	2d 96       	adiw	r28, 0x0d	; 13
     98e:	8c af       	std	Y+60, r24	; 0x3c
     990:	9d af       	std	Y+61, r25	; 0x3d
     992:	ae af       	std	Y+62, r26	; 0x3e
     994:	bf af       	std	Y+63, r27	; 0x3f
     996:	2d 97       	sbiw	r28, 0x0d	; 13
					Local_u32ThresholdHumdt	  = P3_Humd.Value;
     998:	21 96       	adiw	r28, 0x01	; 1
     99a:	8c ad       	ldd	r24, Y+60	; 0x3c
     99c:	9d ad       	ldd	r25, Y+61	; 0x3d
     99e:	ae ad       	ldd	r26, Y+62	; 0x3e
     9a0:	bf ad       	ldd	r27, Y+63	; 0x3f
     9a2:	21 97       	sbiw	r28, 0x01	; 1
     9a4:	61 96       	adiw	r28, 0x11	; 17
     9a6:	8c af       	std	Y+60, r24	; 0x3c
     9a8:	9d af       	std	Y+61, r25	; 0x3d
     9aa:	ae af       	std	Y+62, r26	; 0x3e
     9ac:	bf af       	std	Y+63, r27	; 0x3f
     9ae:	61 97       	sbiw	r28, 0x11	; 17
					break;
				default:
					break;
				}
				APP_Pannel = NORMAL;
     9b0:	85 e0       	ldi	r24, 0x05	; 5
     9b2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <APP_Pannel>
     9b6:	5f cf       	rjmp	.-322    	; 0x876 <__stack+0x17>
				//User_Program_Choice = MAIN;
			}
			break;
			case PROFILE_ONE:
			/****************************/
			if(0 == Factory_u8DisplayFlag && (PROFILE_ONE == APP_Pannel))
     9b8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Factory_u8DisplayFlag>
     9bc:	81 11       	cpse	r24, r1
     9be:	17 c0       	rjmp	.+46     	; 0x9ee <__stack+0x18f>
     9c0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	99 f4       	brne	.+38     	; 0x9ee <__stack+0x18f>
			{
				H_Lcd_Void_LCDClear();
     9c8:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     9cc:	af e3       	ldi	r26, 0x3F	; 63
     9ce:	bf e1       	ldi	r27, 0x1F	; 31
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <__stack+0x171>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <__stack+0x177>
     9d6:	00 00       	nop
				_delay_ms(2);
				H_Lcd_Void_LCDGoTo(3,8);
     9d8:	68 e0       	ldi	r22, 0x08	; 8
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("P1");
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
				Factory_u8DisplayFlag=1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Factory_u8DisplayFlag>
			}
			/********************** Values(Temp, Humditity and Gas) Display  **************************/
			/***************************/
			H_Lcd_Void_LCDGoTo(P1_Temp.Row,P1_Temp.Colum);
     9ee:	6c 81       	ldd	r22, Y+4	; 0x04
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P1_Temp.Name);
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P1_Temp.Value);
     9fe:	6d 81       	ldd	r22, Y+5	; 0x05
     a00:	7e 81       	ldd	r23, Y+6	; 0x06
     a02:	8f 81       	ldd	r24, Y+7	; 0x07
     a04:	98 85       	ldd	r25, Y+8	; 0x08
     a06:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			H_Lcd_Void_LCDGoTo(P1_Humd.Row,P1_Humd.Colum);
     a0a:	6c 85       	ldd	r22, Y+12	; 0x0c
     a0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a0e:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P1_Humd.Name);
     a12:	89 85       	ldd	r24, Y+9	; 0x09
     a14:	9a 85       	ldd	r25, Y+10	; 0x0a
     a16:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P1_Humd.Value);
     a1a:	6d 85       	ldd	r22, Y+13	; 0x0d
     a1c:	7e 85       	ldd	r23, Y+14	; 0x0e
     a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a20:	98 89       	ldd	r25, Y+16	; 0x10
     a22:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			H_Lcd_Void_LCDGoTo(P1_Gas.Row,P1_Gas.Colum);
     a26:	6c 89       	ldd	r22, Y+20	; 0x14
     a28:	8b 89       	ldd	r24, Y+19	; 0x13
     a2a:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P1_Gas.Name);
     a2e:	89 89       	ldd	r24, Y+17	; 0x11
     a30:	9a 89       	ldd	r25, Y+18	; 0x12
     a32:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P1_Gas.Value);
     a36:	6d 89       	ldd	r22, Y+21	; 0x15
     a38:	7e 89       	ldd	r23, Y+22	; 0x16
     a3a:	8f 89       	ldd	r24, Y+23	; 0x17
     a3c:	98 8d       	ldd	r25, Y+24	; 0x18
     a3e:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/********************** Call Input handler function  **************************/
			Factory_voidEditProfil(&P1_Temp,&P1_Humd,&P1_Gas,PROFILE_ONE);
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	ae 01       	movw	r20, r28
     a46:	4f 5e       	subi	r20, 0xEF	; 239
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	be 01       	movw	r22, r28
     a4c:	67 5f       	subi	r22, 0xF7	; 247
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 b3 00 	call	0x166	; 0x166 <Factory_voidEditProfil>
			/*****************************************************************************/
			break;
     a58:	0e cf       	rjmp	.-484    	; 0x876 <__stack+0x17>
			case PROFILE_TWO:
			/****************************/
			if(0 == Factory_u8DisplayFlag && (PROFILE_TWO == APP_Pannel))
     a5a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Factory_u8DisplayFlag>
     a5e:	81 11       	cpse	r24, r1
     a60:	17 c0       	rjmp	.+46     	; 0xa90 <__stack+0x231>
     a62:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	99 f4       	brne	.+38     	; 0xa90 <__stack+0x231>
			{
				H_Lcd_Void_LCDClear();
     a6a:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     a6e:	8f e3       	ldi	r24, 0x3F	; 63
     a70:	9f e1       	ldi	r25, 0x1F	; 31
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <__stack+0x213>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <__stack+0x219>
     a78:	00 00       	nop
				_delay_ms(2);
				H_Lcd_Void_LCDGoTo(3,8);
     a7a:	68 e0       	ldi	r22, 0x08	; 8
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("P2");
     a82:	84 e0       	ldi	r24, 0x04	; 4
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
				Factory_u8DisplayFlag=1;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Factory_u8DisplayFlag>
			}
			/********************** Values(Temp, Humditity and Gas) Display  **************************/
			/***************************/
			H_Lcd_Void_LCDGoTo(P2_Temp.Row,P2_Temp.Colum);
     a90:	6c 8d       	ldd	r22, Y+28	; 0x1c
     a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a94:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P2_Temp.Name);
     a98:	89 8d       	ldd	r24, Y+25	; 0x19
     a9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a9c:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P2_Temp.Value);
     aa0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     aa2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     aa6:	98 a1       	ldd	r25, Y+32	; 0x20
     aa8:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			H_Lcd_Void_LCDGoTo(P2_Humd.Row,P2_Humd.Colum);
     aac:	6c a1       	ldd	r22, Y+36	; 0x24
     aae:	8b a1       	ldd	r24, Y+35	; 0x23
     ab0:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P2_Humd.Name);
     ab4:	89 a1       	ldd	r24, Y+33	; 0x21
     ab6:	9a a1       	ldd	r25, Y+34	; 0x22
     ab8:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P2_Humd.Value);
     abc:	6d a1       	ldd	r22, Y+37	; 0x25
     abe:	7e a1       	ldd	r23, Y+38	; 0x26
     ac0:	8f a1       	ldd	r24, Y+39	; 0x27
     ac2:	98 a5       	ldd	r25, Y+40	; 0x28
     ac4:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			H_Lcd_Void_LCDGoTo(P2_Gas.Row,P2_Gas.Colum);
     ac8:	6c a5       	ldd	r22, Y+44	; 0x2c
     aca:	8b a5       	ldd	r24, Y+43	; 0x2b
     acc:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P2_Gas.Name);
     ad0:	89 a5       	ldd	r24, Y+41	; 0x29
     ad2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ad4:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P2_Gas.Value);
     ad8:	6d a5       	ldd	r22, Y+45	; 0x2d
     ada:	7e a5       	ldd	r23, Y+46	; 0x2e
     adc:	8f a5       	ldd	r24, Y+47	; 0x2f
     ade:	98 a9       	ldd	r25, Y+48	; 0x30
     ae0:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			/********************** Call Input handler function  **************************/
			Factory_voidEditProfil(&P2_Temp,&P2_Humd,&P2_Gas,PROFILE_TWO);
     ae4:	22 e0       	ldi	r18, 0x02	; 2
     ae6:	ae 01       	movw	r20, r28
     ae8:	47 5d       	subi	r20, 0xD7	; 215
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	be 01       	movw	r22, r28
     aee:	6f 5d       	subi	r22, 0xDF	; 223
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	ce 01       	movw	r24, r28
     af4:	49 96       	adiw	r24, 0x19	; 25
     af6:	0e 94 b3 00 	call	0x166	; 0x166 <Factory_voidEditProfil>
			/*****************************************************************************/
			break;
     afa:	bd ce       	rjmp	.-646    	; 0x876 <__stack+0x17>
			case PROFILE_THREE:
			/****************************/
			if(0 == Factory_u8DisplayFlag && (PROFILE_THREE == APP_Pannel))
     afc:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Factory_u8DisplayFlag>
     b00:	81 11       	cpse	r24, r1
     b02:	17 c0       	rjmp	.+46     	; 0xb32 <__stack+0x2d3>
     b04:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	99 f4       	brne	.+38     	; 0xb32 <__stack+0x2d3>
			{
				H_Lcd_Void_LCDClear();
     b0c:	0e 94 7b 07 	call	0xef6	; 0xef6 <H_Lcd_Void_LCDClear>
     b10:	af e3       	ldi	r26, 0x3F	; 63
     b12:	bf e1       	ldi	r27, 0x1F	; 31
     b14:	11 97       	sbiw	r26, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <__stack+0x2b5>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <__stack+0x2bb>
     b1a:	00 00       	nop
				_delay_ms(2);
				H_Lcd_Void_LCDGoTo(3,8);
     b1c:	68 e0       	ldi	r22, 0x08	; 8
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
				H_Lcd_Void_LCDWriteString("P3");
     b24:	87 e0       	ldi	r24, 0x07	; 7
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
				Factory_u8DisplayFlag=1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <Factory_u8DisplayFlag>
			}
			/********************** Values(Temp, Humditity and Gas) Display  **************************/
			/***************************/
			H_Lcd_Void_LCDGoTo(P3_Temp.Row,P3_Temp.Colum);
     b32:	6c a9       	ldd	r22, Y+52	; 0x34
     b34:	8b a9       	ldd	r24, Y+51	; 0x33
     b36:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P3_Temp.Name);
     b3a:	89 a9       	ldd	r24, Y+49	; 0x31
     b3c:	9a a9       	ldd	r25, Y+50	; 0x32
     b3e:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P3_Temp.Value);
     b42:	6d a9       	ldd	r22, Y+53	; 0x35
     b44:	7e a9       	ldd	r23, Y+54	; 0x36
     b46:	8f a9       	ldd	r24, Y+55	; 0x37
     b48:	98 ad       	ldd	r25, Y+56	; 0x38
     b4a:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			H_Lcd_Void_LCDGoTo(P3_Humd.Row,P3_Humd.Colum);
     b4e:	6c ad       	ldd	r22, Y+60	; 0x3c
     b50:	8b ad       	ldd	r24, Y+59	; 0x3b
     b52:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P3_Humd.Name);
     b56:	89 ad       	ldd	r24, Y+57	; 0x39
     b58:	9a ad       	ldd	r25, Y+58	; 0x3a
     b5a:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P3_Humd.Value);
     b5e:	21 96       	adiw	r28, 0x01	; 1
     b60:	6c ad       	ldd	r22, Y+60	; 0x3c
     b62:	7d ad       	ldd	r23, Y+61	; 0x3d
     b64:	8e ad       	ldd	r24, Y+62	; 0x3e
     b66:	9f ad       	ldd	r25, Y+63	; 0x3f
     b68:	21 97       	sbiw	r28, 0x01	; 1
     b6a:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			H_Lcd_Void_LCDGoTo(P3_Gas.Row,P3_Gas.Colum);
     b6e:	25 96       	adiw	r28, 0x05	; 5
     b70:	6f ad       	ldd	r22, Y+63	; 0x3f
     b72:	25 97       	sbiw	r28, 0x05	; 5
     b74:	24 96       	adiw	r28, 0x04	; 4
     b76:	8f ad       	ldd	r24, Y+63	; 0x3f
     b78:	24 97       	sbiw	r28, 0x04	; 4
     b7a:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
			H_Lcd_Void_LCDWriteString(P3_Gas.Name);
     b7e:	23 96       	adiw	r28, 0x03	; 3
     b80:	8e ad       	ldd	r24, Y+62	; 0x3e
     b82:	9f ad       	ldd	r25, Y+63	; 0x3f
     b84:	23 97       	sbiw	r28, 0x03	; 3
     b86:	0e 94 68 07 	call	0xed0	; 0xed0 <H_Lcd_Void_LCDWriteString>
			H_Lcd_Void_LCDWriteNumber(P3_Gas.Value);
     b8a:	29 96       	adiw	r28, 0x09	; 9
     b8c:	6c ad       	ldd	r22, Y+60	; 0x3c
     b8e:	7d ad       	ldd	r23, Y+61	; 0x3d
     b90:	8e ad       	ldd	r24, Y+62	; 0x3e
     b92:	9f ad       	ldd	r25, Y+63	; 0x3f
     b94:	29 97       	sbiw	r28, 0x09	; 9
     b96:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
			/**************************/
			/********************** Call Input handler function  **************************/
			Factory_voidEditProfil(&P3_Temp,&P3_Humd,&P3_Gas,PROFILE_THREE);
     b9a:	23 e0       	ldi	r18, 0x03	; 3
     b9c:	ae 01       	movw	r20, r28
     b9e:	4f 5b       	subi	r20, 0xBF	; 191
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	be 01       	movw	r22, r28
     ba4:	67 5c       	subi	r22, 0xC7	; 199
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	ce 01       	movw	r24, r28
     baa:	c1 96       	adiw	r24, 0x31	; 49
     bac:	0e 94 b3 00 	call	0x166	; 0x166 <Factory_voidEditProfil>
			/*****************************************************************************/
			break;
     bb0:	62 ce       	rjmp	.-828    	; 0x876 <__stack+0x17>
			case PANIC:
				Factory_voidPanicModeOn();
     bb2:	0e 94 37 01 	call	0x26e	; 0x26e <Factory_voidPanicModeOn>
				/*Display Logs?*/
				Factory_voidDisplayLogs();
     bb6:	0e 94 a8 02 	call	0x550	; 0x550 <Factory_voidDisplayLogs>
				APP_Pannel = NORMAL;
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <APP_Pannel>
				break;
     bc0:	5a ce       	rjmp	.-844    	; 0x876 <__stack+0x17>
			case NORMAL:
				Factory_voidDisplayStrings(&P1_Temp,&P1_Humd,&P1_Gas);
     bc2:	ae 01       	movw	r20, r28
     bc4:	4f 5e       	subi	r20, 0xEF	; 239
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	be 01       	movw	r22, r28
     bca:	67 5f       	subi	r22, 0xF7	; 247
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	0e 94 57 00 	call	0xae	; 0xae <Factory_voidDisplayStrings>
				while( NORMAL == APP_Pannel)
     bd6:	73 c0       	rjmp	.+230    	; 0xcbe <__stack+0x45f>
				{
					Local_u32Temp		   = LM35_getTemperature();
     bd8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <LM35_getTemperature>
     bdc:	c8 2e       	mov	r12, r24
     bde:	d1 2c       	mov	r13, r1
     be0:	e1 2c       	mov	r14, r1
     be2:	f1 2c       	mov	r15, r1
					/* Get reading of Gas
					* call this GetGasPercentage(ReadSensor(),LPG);
					*/
					Local_u32GasPrecentage = 10;					
					/*Call Humidity function*/			
					Local_u32Humditiy	   = (Local_u32Temp/10)+5;
     be4:	c7 01       	movw	r24, r14
     be6:	b6 01       	movw	r22, r12
     be8:	2a e0       	ldi	r18, 0x0A	; 10
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__udivmodsi4>
     bf4:	49 01       	movw	r8, r18
     bf6:	5a 01       	movw	r10, r20
     bf8:	b5 e0       	ldi	r27, 0x05	; 5
     bfa:	8b 0e       	add	r8, r27
     bfc:	91 1c       	adc	r9, r1
     bfe:	a1 1c       	adc	r10, r1
     c00:	b1 1c       	adc	r11, r1
					
					/*********************** Display values on LCD **************************/
					
					H_Lcd_Void_LCDGoTo(P1_Temp.Row,P1_Temp.Colum + LCD_TEMP_OFFSET);
     c02:	6c 81       	ldd	r22, Y+4	; 0x04
     c04:	6b 5f       	subi	r22, 0xFB	; 251
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteNumber(Local_u32Temp);
     c0c:	c7 01       	movw	r24, r14
     c0e:	b6 01       	movw	r22, r12
     c10:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
					
					H_Lcd_Void_LCDGoTo(P1_Humd.Row,P1_Humd.Colum + LCD_HUMDT_OFFSET);
     c14:	6c 85       	ldd	r22, Y+12	; 0x0c
     c16:	67 5f       	subi	r22, 0xF7	; 247
     c18:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1a:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteNumber(Local_u32Humditiy);
     c1e:	c5 01       	movw	r24, r10
     c20:	b4 01       	movw	r22, r8
     c22:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
					
					H_Lcd_Void_LCDGoTo(P1_Gas.Row,P1_Gas.Colum + LCD_GAS_OFFSET);
     c26:	6c 89       	ldd	r22, Y+20	; 0x14
     c28:	6c 5f       	subi	r22, 0xFC	; 252
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	0e 94 de 07 	call	0xfbc	; 0xfbc <H_Lcd_Void_LCDGoTo>
					H_Lcd_Void_LCDWriteNumber(Local_u32GasPrecentage);
     c30:	6a e0       	ldi	r22, 0x0A	; 10
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 7f 07 	call	0xefe	; 0xefe <H_Lcd_Void_LCDWriteNumber>
					/**********************************************************************/
					if(Local_u32Temp >= Local_u32ThresholdTemp)
     c3c:	c4 14       	cp	r12, r4
     c3e:	d5 04       	cpc	r13, r5
     c40:	e6 04       	cpc	r14, r6
     c42:	f7 04       	cpc	r15, r7
     c44:	90 f0       	brcs	.+36     	; 0xc6a <__stack+0x40b>
					{
						/*Save Log*/
						Factory_voidSaveLogs(Log_pu8Temp,Local_u32Temp);
     c46:	b7 01       	movw	r22, r14
     c48:	a6 01       	movw	r20, r12
     c4a:	8a e0       	ldi	r24, 0x0A	; 10
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <Factory_voidSaveLogs>
						/***********************************************************************/
						MCAL_EXTI_voidDisableInterrupt(EXTI_INT1);	/*Disable Interrupt (EXTI) */
     c52:	87 e0       	ldi	r24, 0x07	; 7
     c54:	0e 94 36 0c 	call	0x186c	; 0x186c <MCAL_EXTI_voidDisableInterrupt>
						H_LED_Void_LedOn(LED_RED);
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	0e 94 1c 08 	call	0x1038	; 0x1038 <H_LED_Void_LedOn>
						H_Buzzer_Void_BuzzerOn();
     c5e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <H_Buzzer_Void_BuzzerOn>
						/*Go TO Panic Mode*/
						APP_Pannel = PANIC;
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <APP_Pannel>
     c68:	2a c0       	rjmp	.+84     	; 0xcbe <__stack+0x45f>
					}
					else if(Local_u32GasPrecentage >= Local_u32ThresholdGas)
     c6a:	2d 96       	adiw	r28, 0x0d	; 13
     c6c:	8c ad       	ldd	r24, Y+60	; 0x3c
     c6e:	9d ad       	ldd	r25, Y+61	; 0x3d
     c70:	ae ad       	ldd	r26, Y+62	; 0x3e
     c72:	bf ad       	ldd	r27, Y+63	; 0x3f
     c74:	2d 97       	sbiw	r28, 0x0d	; 13
     c76:	0b 97       	sbiw	r24, 0x0b	; 11
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	60 f4       	brcc	.+24     	; 0xc96 <__stack+0x437>
					{
						/*Save Log*/
						Factory_voidSaveLogs(Log_pu8Gas,Local_u32GasPrecentage);
     c7e:	4a e0       	ldi	r20, 0x0A	; 10
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	84 e1       	ldi	r24, 0x14	; 20
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <Factory_voidSaveLogs>
						/*Go TO Panic Mode*/
						APP_Pannel = PANIC;
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <APP_Pannel>
     c94:	14 c0       	rjmp	.+40     	; 0xcbe <__stack+0x45f>
					}
					else if(Local_u32Humditiy >= Local_u32ThresholdHumdt)
     c96:	61 96       	adiw	r28, 0x11	; 17
     c98:	8c ad       	ldd	r24, Y+60	; 0x3c
     c9a:	9d ad       	ldd	r25, Y+61	; 0x3d
     c9c:	ae ad       	ldd	r26, Y+62	; 0x3e
     c9e:	bf ad       	ldd	r27, Y+63	; 0x3f
     ca0:	61 97       	sbiw	r28, 0x11	; 17
     ca2:	88 16       	cp	r8, r24
     ca4:	99 06       	cpc	r9, r25
     ca6:	aa 06       	cpc	r10, r26
     ca8:	bb 06       	cpc	r11, r27
     caa:	48 f0       	brcs	.+18     	; 0xcbe <__stack+0x45f>
					{
						/*Save Log*/
						Factory_voidSaveLogs(Log_pu8Humd,Local_u32Humditiy);
     cac:	b5 01       	movw	r22, r10
     cae:	a4 01       	movw	r20, r8
     cb0:	8d e1       	ldi	r24, 0x1D	; 29
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <Factory_voidSaveLogs>
						/*Go TO Panic Mode*/
						APP_Pannel = PANIC;
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <APP_Pannel>
				Factory_voidDisplayLogs();
				APP_Pannel = NORMAL;
				break;
			case NORMAL:
				Factory_voidDisplayStrings(&P1_Temp,&P1_Humd,&P1_Gas);
				while( NORMAL == APP_Pannel)
     cbe:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <APP_Pannel>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <__stack+0x469>
     cc6:	88 cf       	rjmp	.-240    	; 0xbd8 <__stack+0x379>
     cc8:	d6 cd       	rjmp	.-1108   	; 0x876 <__stack+0x17>

00000cca <H_Buzzer_Void_BuzzerInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	84 e2       	ldi	r24, 0x24	; 36
     cce:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
     cd2:	08 95       	ret

00000cd4 <H_Buzzer_Void_BuzzerOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	84 e2       	ldi	r24, 0x24	; 36
     cd8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     cdc:	08 95       	ret

00000cde <H_Buzzer_Void_BuzzerOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	84 e2       	ldi	r24, 0x24	; 36
     ce2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     ce6:	08 95       	ret

00000ce8 <HAL_MQ_voidInit>:
// we will find sensor resistor.


void HAL_MQ_voidInit(void)
{
	M_DIO_Void_SetPinDirection(PA1_PIN, INPUT);
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	8b e0       	ldi	r24, 0x0B	; 11
     cec:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinPullUpRes(PA1_PIN,DISABLE);
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	8b e0       	ldi	r24, 0x0B	; 11
     cf4:	0e 94 48 0b 	call	0x1690	; 0x1690 <M_DIO_Void_SetPinPullUpRes>
     cf8:	08 95       	ret

00000cfa <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
     cfa:	cf 93       	push	r28
     cfc:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	8d e0       	ldi	r24, 0x0D	; 13
     d02:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
     d06:	c4 fb       	bst	r28, 4
     d08:	66 27       	eor	r22, r22
     d0a:	60 f9       	bld	r22, 0
     d0c:	84 e1       	ldi	r24, 0x14	; 20
     d0e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
     d12:	c5 fb       	bst	r28, 5
     d14:	66 27       	eor	r22, r22
     d16:	60 f9       	bld	r22, 0
     d18:	85 e1       	ldi	r24, 0x15	; 21
     d1a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
     d1e:	c6 fb       	bst	r28, 6
     d20:	66 27       	eor	r22, r22
     d22:	60 f9       	bld	r22, 0
     d24:	86 e1       	ldi	r24, 0x16	; 22
     d26:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
     d2a:	6c 2f       	mov	r22, r28
     d2c:	66 1f       	adc	r22, r22
     d2e:	66 27       	eor	r22, r22
     d30:	66 1f       	adc	r22, r22
     d32:	88 e1       	ldi	r24, 0x18	; 24
     d34:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	8c e0       	ldi	r24, 0x0C	; 12
     d3c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     d40:	8f e9       	ldi	r24, 0x9F	; 159
     d42:	9f e0       	ldi	r25, 0x0F	; 15
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <H_Lcd_Void_LCDWriteCharacter+0x4a>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <H_Lcd_Void_LCDWriteCharacter+0x50>
     d4a:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	8c e0       	ldi	r24, 0x0C	; 12
     d50:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     d54:	8f e9       	ldi	r24, 0x9F	; 159
     d56:	9f e0       	ldi	r25, 0x0F	; 15
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <H_Lcd_Void_LCDWriteCharacter+0x5e>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <H_Lcd_Void_LCDWriteCharacter+0x64>
     d5e:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
     d60:	6c 2f       	mov	r22, r28
     d62:	61 70       	andi	r22, 0x01	; 1
     d64:	84 e1       	ldi	r24, 0x14	; 20
     d66:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
     d6a:	c1 fb       	bst	r28, 1
     d6c:	66 27       	eor	r22, r22
     d6e:	60 f9       	bld	r22, 0
     d70:	85 e1       	ldi	r24, 0x15	; 21
     d72:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
     d76:	c2 fb       	bst	r28, 2
     d78:	66 27       	eor	r22, r22
     d7a:	60 f9       	bld	r22, 0
     d7c:	86 e1       	ldi	r24, 0x16	; 22
     d7e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
     d82:	c3 fb       	bst	r28, 3
     d84:	66 27       	eor	r22, r22
     d86:	60 f9       	bld	r22, 0
     d88:	88 e1       	ldi	r24, 0x18	; 24
     d8a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	8c e0       	ldi	r24, 0x0C	; 12
     d92:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     d96:	8f e9       	ldi	r24, 0x9F	; 159
     d98:	9f e0       	ldi	r25, 0x0F	; 15
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <H_Lcd_Void_LCDWriteCharacter+0xa0>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <H_Lcd_Void_LCDWriteCharacter+0xa6>
     da0:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	8c e0       	ldi	r24, 0x0C	; 12
     da6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     daa:	8f e1       	ldi	r24, 0x1F	; 31
     dac:	9e e4       	ldi	r25, 0x4E	; 78
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <H_Lcd_Void_LCDWriteCharacter+0xb4>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <H_Lcd_Void_LCDWriteCharacter+0xba>
     db4:	00 00       	nop
	_delay_ms(5);
#endif
}
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
     dba:	cf 93       	push	r28
     dbc:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	8d e0       	ldi	r24, 0x0D	; 13
     dc2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
     dc6:	c4 fb       	bst	r28, 4
     dc8:	66 27       	eor	r22, r22
     dca:	60 f9       	bld	r22, 0
     dcc:	84 e1       	ldi	r24, 0x14	; 20
     dce:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
     dd2:	c5 fb       	bst	r28, 5
     dd4:	66 27       	eor	r22, r22
     dd6:	60 f9       	bld	r22, 0
     dd8:	85 e1       	ldi	r24, 0x15	; 21
     dda:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
     dde:	c6 fb       	bst	r28, 6
     de0:	66 27       	eor	r22, r22
     de2:	60 f9       	bld	r22, 0
     de4:	86 e1       	ldi	r24, 0x16	; 22
     de6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
     dea:	6c 2f       	mov	r22, r28
     dec:	66 1f       	adc	r22, r22
     dee:	66 27       	eor	r22, r22
     df0:	66 1f       	adc	r22, r22
     df2:	88 e1       	ldi	r24, 0x18	; 24
     df4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	8c e0       	ldi	r24, 0x0C	; 12
     dfc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     e00:	8f e9       	ldi	r24, 0x9F	; 159
     e02:	9f e0       	ldi	r25, 0x0F	; 15
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <H_Lcd_Void_LCDWriteCommand+0x4a>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <H_Lcd_Void_LCDWriteCommand+0x50>
     e0a:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	8c e0       	ldi	r24, 0x0C	; 12
     e10:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     e14:	8f e9       	ldi	r24, 0x9F	; 159
     e16:	9f e0       	ldi	r25, 0x0F	; 15
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <H_Lcd_Void_LCDWriteCommand+0x5e>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <H_Lcd_Void_LCDWriteCommand+0x64>
     e1e:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
     e20:	6c 2f       	mov	r22, r28
     e22:	61 70       	andi	r22, 0x01	; 1
     e24:	84 e1       	ldi	r24, 0x14	; 20
     e26:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
     e2a:	c1 fb       	bst	r28, 1
     e2c:	66 27       	eor	r22, r22
     e2e:	60 f9       	bld	r22, 0
     e30:	85 e1       	ldi	r24, 0x15	; 21
     e32:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
     e36:	c2 fb       	bst	r28, 2
     e38:	66 27       	eor	r22, r22
     e3a:	60 f9       	bld	r22, 0
     e3c:	86 e1       	ldi	r24, 0x16	; 22
     e3e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
     e42:	c3 fb       	bst	r28, 3
     e44:	66 27       	eor	r22, r22
     e46:	60 f9       	bld	r22, 0
     e48:	88 e1       	ldi	r24, 0x18	; 24
     e4a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	8c e0       	ldi	r24, 0x0C	; 12
     e52:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     e56:	8f e9       	ldi	r24, 0x9F	; 159
     e58:	9f e0       	ldi	r25, 0x0F	; 15
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <H_Lcd_Void_LCDWriteCommand+0xa0>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <H_Lcd_Void_LCDWriteCommand+0xa6>
     e60:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	8c e0       	ldi	r24, 0x0C	; 12
     e66:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
     e6a:	8f e1       	ldi	r24, 0x1F	; 31
     e6c:	9e e4       	ldi	r25, 0x4E	; 78
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <H_Lcd_Void_LCDWriteCommand+0xb4>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <H_Lcd_Void_LCDWriteCommand+0xba>
     e74:	00 00       	nop
	_delay_ms(5);
#endif
}
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	84 e1       	ldi	r24, 0x14	; 20
     e7e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	85 e1       	ldi	r24, 0x15	; 21
     e86:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	86 e1       	ldi	r24, 0x16	; 22
     e8e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	88 e1       	ldi	r24, 0x18	; 24
     e96:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	8d e0       	ldi	r24, 0x0D	; 13
     e9e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	8c e0       	ldi	r24, 0x0C	; 12
     ea6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
     eaa:	83 e3       	ldi	r24, 0x33	; 51
     eac:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
     eb0:	82 e3       	ldi	r24, 0x32	; 50
     eb2:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
     eb6:	88 e2       	ldi	r24, 0x28	; 40
     eb8:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
     ece:	08 95       	ret

00000ed0 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	8c 01       	movw	r16, r24
	u8 Local_U8_Counter = 0;
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <H_Lcd_Void_LCDWriteString+0x12>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
     edc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
     ee0:	cf 5f       	subi	r28, 0xFF	; 255
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     ee2:	f8 01       	movw	r30, r16
     ee4:	ec 0f       	add	r30, r28
     ee6:	f1 1d       	adc	r31, r1
     ee8:	80 81       	ld	r24, Z
     eea:	81 11       	cpse	r24, r1
     eec:	f7 cf       	rjmp	.-18     	; 0xedc <H_Lcd_Void_LCDWriteString+0xc>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <H_Lcd_Void_LCDClear>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
     efc:	08 95       	ret

00000efe <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	2a 97       	sbiw	r28, 0x0a	; 10
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	6b 01       	movw	r12, r22
     f1e:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
     f20:	fe 01       	movw	r30, r28
     f22:	31 96       	adiw	r30, 0x01	; 1
     f24:	8a e0       	ldi	r24, 0x0A	; 10
     f26:	df 01       	movw	r26, r30
     f28:	1d 92       	st	X+, r1
     f2a:	8a 95       	dec	r24
     f2c:	e9 f7       	brne	.-6      	; 0xf28 <H_Lcd_Void_LCDWriteNumber+0x2a>
	if(Copy_S32_Number < 0)
     f2e:	ff 20       	and	r15, r15
     f30:	5c f4       	brge	.+22     	; 0xf48 <H_Lcd_Void_LCDWriteNumber+0x4a>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
     f32:	f0 94       	com	r15
     f34:	e0 94       	com	r14
     f36:	d0 94       	com	r13
     f38:	c0 94       	com	r12
     f3a:	c1 1c       	adc	r12, r1
     f3c:	d1 1c       	adc	r13, r1
     f3e:	e1 1c       	adc	r14, r1
     f40:	f1 1c       	adc	r15, r1
		H_Lcd_Void_LCDWriteCharacter('-');
     f42:	8d e2       	ldi	r24, 0x2D	; 45
     f44:	0e 94 7d 06 	call	0xcfa	; 0xcfa <H_Lcd_Void_LCDWriteCharacter>

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     f48:	10 e0       	ldi	r17, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('-');
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
     f4a:	c7 01       	movw	r24, r14
     f4c:	b6 01       	movw	r22, r12
     f4e:	2a e0       	ldi	r18, 0x0A	; 10
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__divmodsi4>
     f5a:	e1 e0       	ldi	r30, 0x01	; 1
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	ec 0f       	add	r30, r28
     f60:	fd 1f       	adc	r31, r29
     f62:	e1 0f       	add	r30, r17
     f64:	f1 1d       	adc	r31, r1
     f66:	17 fd       	sbrc	r17, 7
     f68:	fa 95       	dec	r31
     f6a:	60 83       	st	Z, r22
		Copy_S32_Number                = Copy_S32_Number / 10;
     f6c:	c2 2e       	mov	r12, r18
     f6e:	d3 2e       	mov	r13, r19
     f70:	e4 2e       	mov	r14, r20
     f72:	f5 2e       	mov	r15, r21
		Local_S8_Counter++;
     f74:	1f 5f       	subi	r17, 0xFF	; 255
	}while(Copy_S32_Number != 0);
     f76:	c1 14       	cp	r12, r1
     f78:	d1 04       	cpc	r13, r1
     f7a:	e1 04       	cpc	r14, r1
     f7c:	f1 04       	cpc	r15, r1
     f7e:	29 f7       	brne	.-54     	; 0xf4a <H_Lcd_Void_LCDWriteNumber+0x4c>
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <H_Lcd_Void_LCDWriteNumber+0x9e>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
     f82:	11 50       	subi	r17, 0x01	; 1
     f84:	e1 e0       	ldi	r30, 0x01	; 1
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	ec 0f       	add	r30, r28
     f8a:	fd 1f       	adc	r31, r29
     f8c:	e1 0f       	add	r30, r17
     f8e:	f1 1d       	adc	r31, r1
     f90:	17 fd       	sbrc	r17, 7
     f92:	fa 95       	dec	r31
     f94:	80 81       	ld	r24, Z
     f96:	80 5d       	subi	r24, 0xD0	; 208
     f98:	0e 94 7d 06 	call	0xcfa	; 0xcfa <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
     f9c:	11 16       	cp	r1, r17
     f9e:	8c f3       	brlt	.-30     	; 0xf82 <H_Lcd_Void_LCDWriteNumber+0x84>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
     fa0:	2a 96       	adiw	r28, 0x0a	; 10
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	ff 90       	pop	r15
     fb4:	ef 90       	pop	r14
     fb6:	df 90       	pop	r13
     fb8:	cf 90       	pop	r12
     fba:	08 95       	ret

00000fbc <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <H_Lcd_Void_LCDGoTo+0x6>
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <H_Lcd_Void_LCDGoTo+0x8>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
     fc8:	90 e8       	ldi	r25, 0x80	; 128
     fca:	99 83       	std	Y+1, r25	; 0x01
     fcc:	90 ec       	ldi	r25, 0xC0	; 192
     fce:	9a 83       	std	Y+2, r25	; 0x02
     fd0:	94 e9       	ldi	r25, 0x94	; 148
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	94 ed       	ldi	r25, 0xD4	; 212
     fd6:	9c 83       	std	Y+4, r25	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
     fd8:	e1 e0       	ldi	r30, 0x01	; 1
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	ec 0f       	add	r30, r28
     fde:	fd 1f       	adc	r31, r29
     fe0:	e8 0f       	add	r30, r24
     fe2:	f1 1d       	adc	r31, r1
     fe4:	80 81       	ld	r24, Z
     fe6:	86 0f       	add	r24, r22
     fe8:	0e 94 dd 06 	call	0xdba	; 0xdba <H_Lcd_Void_LCDWriteCommand>
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <H_LED_Void_LedInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	71 f0       	breq	.+28     	; 0x101a <H_LED_Void_LedInit+0x20>
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <H_LED_Void_LedInit+0xc>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	31 f0       	breq	.+12     	; 0x1010 <H_LED_Void_LedInit+0x16>
    1004:	08 95       	ret
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	69 f0       	breq	.+26     	; 0x1024 <H_LED_Void_LedInit+0x2a>
    100a:	84 30       	cpi	r24, 0x04	; 4
    100c:	81 f0       	breq	.+32     	; 0x102e <H_LED_Void_LedInit+0x34>
    100e:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	80 e1       	ldi	r24, 0x10	; 16
    1014:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    1018:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	8f e0       	ldi	r24, 0x0F	; 15
    101e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    1022:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	8e e0       	ldi	r24, 0x0E	; 14
    1028:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    102c:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	8b e1       	ldi	r24, 0x1B	; 27
    1032:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    1036:	08 95       	ret

00001038 <H_LED_Void_LedOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	71 f0       	breq	.+28     	; 0x1058 <H_LED_Void_LedOn+0x20>
    103c:	18 f4       	brcc	.+6      	; 0x1044 <H_LED_Void_LedOn+0xc>
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	31 f0       	breq	.+12     	; 0x104e <H_LED_Void_LedOn+0x16>
    1042:	08 95       	ret
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	69 f0       	breq	.+26     	; 0x1062 <H_LED_Void_LedOn+0x2a>
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	81 f0       	breq	.+32     	; 0x106c <H_LED_Void_LedOn+0x34>
    104c:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	80 e1       	ldi	r24, 0x10	; 16
    1052:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    1056:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	8f e0       	ldi	r24, 0x0F	; 15
    105c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    1060:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	8e e0       	ldi	r24, 0x0E	; 14
    1066:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    106a:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	8b e1       	ldi	r24, 0x1B	; 27
    1070:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    1074:	08 95       	ret

00001076 <H_LED_Void_LedOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	71 f0       	breq	.+28     	; 0x1096 <H_LED_Void_LedOff+0x20>
    107a:	18 f4       	brcc	.+6      	; 0x1082 <H_LED_Void_LedOff+0xc>
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	31 f0       	breq	.+12     	; 0x108c <H_LED_Void_LedOff+0x16>
    1080:	08 95       	ret
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	69 f0       	breq	.+26     	; 0x10a0 <H_LED_Void_LedOff+0x2a>
    1086:	84 30       	cpi	r24, 0x04	; 4
    1088:	81 f0       	breq	.+32     	; 0x10aa <H_LED_Void_LedOff+0x34>
    108a:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	80 e1       	ldi	r24, 0x10	; 16
    1090:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    1094:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	8f e0       	ldi	r24, 0x0F	; 15
    109a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    109e:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	8e e0       	ldi	r24, 0x0E	; 14
    10a4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    10a8:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	8b e1       	ldi	r24, 0x1B	; 27
    10ae:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
    10b2:	08 95       	ret

000010b4 <LM35_Void_Init>:
#include "LM35_Config.h"


void LM35_Void_Init(void)
{
	 M_DIO_Void_SetPinDirection(LM35_PIN ,INPUT);
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	8a e0       	ldi	r24, 0x0A	; 10
    10b8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	 M_DIO_Void_SetPinPullUpRes(LM35_PIN,DISABLE);
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	8a e0       	ldi	r24, 0x0A	; 10
    10c0:	0e 94 48 0b 	call	0x1690	; 0x1690 <M_DIO_Void_SetPinPullUpRes>
    10c4:	08 95       	ret

000010c6 <LM35_getTemperature>:

u8 LM35_getTemperature(void)
{		u16 lm35Voltage=0;
		u8 temperature = 0;
	
	    lm35Voltage = ADC_Read_MiliVolt(LM35_CHANNEL); // convert from adc lto voltage (milli volt)
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	0e 94 df 09 	call	0x13be	; 0x13be <ADC_Read_MiliVolt>
	    // Temperature in Celsius
		/*10mv    1 c
			Y     ??
			? = 
		*/
	    temperature = lm35Voltage / 10;
    10cc:	9c 01       	movw	r18, r24
    10ce:	ad ec       	ldi	r26, 0xCD	; 205
    10d0:	bc ec       	ldi	r27, 0xCC	; 204
    10d2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__umulhisi3>
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
    10da:	96 95       	lsr	r25
    10dc:	87 95       	ror	r24
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
	
	
	return temperature;
}
    10e2:	08 95       	ret

000010e4 <H_PushButton_Void_PushButtonInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
	switch(Copy_U8_PushButton)
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	59 f0       	breq	.+22     	; 0x10fe <H_PushButton_Void_PushButtonInit+0x1a>
    10e8:	28 f0       	brcs	.+10     	; 0x10f4 <H_PushButton_Void_PushButtonInit+0x10>
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	69 f0       	breq	.+26     	; 0x1108 <H_PushButton_Void_PushButtonInit+0x24>
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	81 f0       	breq	.+32     	; 0x1112 <H_PushButton_Void_PushButtonInit+0x2e>
    10f2:	08 95       	ret
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	8f e2       	ldi	r24, 0x2F	; 47
    10f8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    10fc:	08 95       	ret
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	8e e2       	ldi	r24, 0x2E	; 46
    1102:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    1106:	08 95       	ret
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	8d e2       	ldi	r24, 0x2D	; 45
    110c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    1110:	08 95       	ret
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	8b e2       	ldi	r24, 0x2B	; 43
    1116:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
    111a:	08 95       	ret

0000111c <H_PushButton_U8_PushButtonRead>:
}

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
	switch(Copy_U8_PushButton)
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	09 f1       	breq	.+66     	; 0x1162 <H_PushButton_U8_PushButtonRead+0x46>
    1120:	30 f0       	brcs	.+12     	; 0x112e <H_PushButton_U8_PushButtonRead+0x12>
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	c1 f1       	breq	.+112    	; 0x1196 <H_PushButton_U8_PushButtonRead+0x7a>
    1126:	83 30       	cpi	r24, 0x03	; 3
    1128:	09 f4       	brne	.+2      	; 0x112c <H_PushButton_U8_PushButtonRead+0x10>
    112a:	4f c0       	rjmp	.+158    	; 0x11ca <H_PushButton_U8_PushButtonRead+0xae>
    112c:	68 c0       	rjmp	.+208    	; 0x11fe <H_PushButton_U8_PushButtonRead+0xe2>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    112e:	8f e2       	ldi	r24, 0x2F	; 47
    1130:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    1134:	81 11       	cpse	r24, r1
    1136:	65 c0       	rjmp	.+202    	; 0x1202 <H_PushButton_U8_PushButtonRead+0xe6>
    1138:	2f ef       	ldi	r18, 0xFF	; 255
    113a:	80 e7       	ldi	r24, 0x70	; 112
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	80 40       	sbci	r24, 0x00	; 0
    1142:	90 40       	sbci	r25, 0x00	; 0
    1144:	e1 f7       	brne	.-8      	; 0x113e <H_PushButton_U8_PushButtonRead+0x22>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <H_PushButton_U8_PushButtonRead+0x2c>
    1148:	00 00       	nop
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    114a:	8f e2       	ldi	r24, 0x2F	; 47
    114c:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    1150:	81 11       	cpse	r24, r1
    1152:	59 c0       	rjmp	.+178    	; 0x1206 <H_PushButton_U8_PushButtonRead+0xea>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
    1154:	8f e2       	ldi	r24, 0x2F	; 47
    1156:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    115a:	88 23       	and	r24, r24
    115c:	d9 f3       	breq	.-10     	; 0x1154 <H_PushButton_U8_PushButtonRead+0x38>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	08 95       	ret
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    1162:	8e e2       	ldi	r24, 0x2E	; 46
    1164:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    1168:	81 11       	cpse	r24, r1
    116a:	4f c0       	rjmp	.+158    	; 0x120a <H_PushButton_U8_PushButtonRead+0xee>
    116c:	2f ef       	ldi	r18, 0xFF	; 255
    116e:	80 e7       	ldi	r24, 0x70	; 112
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	21 50       	subi	r18, 0x01	; 1
    1174:	80 40       	sbci	r24, 0x00	; 0
    1176:	90 40       	sbci	r25, 0x00	; 0
    1178:	e1 f7       	brne	.-8      	; 0x1172 <H_PushButton_U8_PushButtonRead+0x56>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <H_PushButton_U8_PushButtonRead+0x60>
    117c:	00 00       	nop
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    117e:	8e e2       	ldi	r24, 0x2E	; 46
    1180:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    1184:	81 11       	cpse	r24, r1
    1186:	43 c0       	rjmp	.+134    	; 0x120e <H_PushButton_U8_PushButtonRead+0xf2>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
    1188:	8e e2       	ldi	r24, 0x2E	; 46
    118a:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    118e:	88 23       	and	r24, r24
    1190:	d9 f3       	breq	.-10     	; 0x1188 <H_PushButton_U8_PushButtonRead+0x6c>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    1196:	8d e2       	ldi	r24, 0x2D	; 45
    1198:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    119c:	81 11       	cpse	r24, r1
    119e:	39 c0       	rjmp	.+114    	; 0x1212 <H_PushButton_U8_PushButtonRead+0xf6>
    11a0:	2f ef       	ldi	r18, 0xFF	; 255
    11a2:	80 e7       	ldi	r24, 0x70	; 112
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	21 50       	subi	r18, 0x01	; 1
    11a8:	80 40       	sbci	r24, 0x00	; 0
    11aa:	90 40       	sbci	r25, 0x00	; 0
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <H_PushButton_U8_PushButtonRead+0x8a>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <H_PushButton_U8_PushButtonRead+0x94>
    11b0:	00 00       	nop
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    11b2:	8d e2       	ldi	r24, 0x2D	; 45
    11b4:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    11b8:	81 11       	cpse	r24, r1
    11ba:	2d c0       	rjmp	.+90     	; 0x1216 <H_PushButton_U8_PushButtonRead+0xfa>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
    11bc:	8d e2       	ldi	r24, 0x2D	; 45
    11be:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    11c2:	88 23       	and	r24, r24
    11c4:	d9 f3       	breq	.-10     	; 0x11bc <H_PushButton_U8_PushButtonRead+0xa0>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    11ca:	8b e2       	ldi	r24, 0x2B	; 43
    11cc:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    11d0:	81 11       	cpse	r24, r1
    11d2:	23 c0       	rjmp	.+70     	; 0x121a <H_PushButton_U8_PushButtonRead+0xfe>
    11d4:	2f ef       	ldi	r18, 0xFF	; 255
    11d6:	80 e7       	ldi	r24, 0x70	; 112
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	21 50       	subi	r18, 0x01	; 1
    11dc:	80 40       	sbci	r24, 0x00	; 0
    11de:	90 40       	sbci	r25, 0x00	; 0
    11e0:	e1 f7       	brne	.-8      	; 0x11da <H_PushButton_U8_PushButtonRead+0xbe>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <H_PushButton_U8_PushButtonRead+0xc8>
    11e4:	00 00       	nop
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    11e6:	8b e2       	ldi	r24, 0x2B	; 43
    11e8:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    11ec:	81 11       	cpse	r24, r1
    11ee:	17 c0       	rjmp	.+46     	; 0x121e <H_PushButton_U8_PushButtonRead+0x102>
			{
				while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
    11f0:	8b e2       	ldi	r24, 0x2B	; 43
    11f2:	0e 94 04 0b 	call	0x1608	; 0x1608 <M_DIO_Void_GetPinValue>
    11f6:	88 23       	and	r24, r24
    11f8:	d9 f3       	breq	.-10     	; 0x11f0 <H_PushButton_U8_PushButtonRead+0xd4>
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret
	}
}

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	08 95       	ret
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	08 95       	ret
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	08 95       	ret
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	08 95       	ret
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	08 95       	ret
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	08 95       	ret
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	08 95       	ret
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	08 95       	ret
    121e:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
}
    1220:	08 95       	ret

00001222 <UltraSonic_Init>:
static volatile f64 count = 0;
static volatile f64 distacne = 0;

void UltraSonic_Init(void)
{
	M_DIO_Void_SetPinDirection(TRIGGER_PIN, OUTPUT);
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	8e e1       	ldi	r24, 0x1E	; 30
    1226:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <M_DIO_Void_SetPinDirection>
	//SET_BIT(TIMSK_REG,2); /* Enable Timer1 overflow interrupts */
	TCCR1A_REG = 0;
    122a:	1f bc       	out	0x2f, r1	; 47
    122c:	08 95       	ret

0000122e <UltraSonic_Update>:
		
	u32 Local_u32TimeOut=0;

	/**********************************************/
	
	TCNT1_REG = 0;
    122e:	1d bc       	out	0x2d, r1	; 45
    1230:	1c bc       	out	0x2c, r1	; 44
	TCCR1B_REG = 0x41;		/*Input capture rising*/
    1232:	81 e4       	ldi	r24, 0x41	; 65
    1234:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TIFR_REG,5);
    1236:	88 b7       	in	r24, 0x38	; 56
    1238:	80 62       	ori	r24, 0x20	; 32
    123a:	88 bf       	out	0x38, r24	; 56
	//SET_BIT(TIFR_REG,2);
	
	M_DIO_Void_SetPinValue(TRIGGER_PIN, HIGH);
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	8e e1       	ldi	r24, 0x1E	; 30
    1240:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1244:	25 e3       	ldi	r18, 0x35	; 53
    1246:	2a 95       	dec	r18
    1248:	f1 f7       	brne	.-4      	; 0x1246 <UltraSonic_Update+0x18>
    124a:	00 00       	nop
	_delay_us(10);
	M_DIO_Void_SetPinValue(TRIGGER_PIN, LOW);
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	8e e1       	ldi	r24, 0x1E	; 30
    1250:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <M_DIO_Void_SetPinValue>
}

f32 UltraSonic_Update(void)
{
		
	u32 Local_u32TimeOut=0;
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	dc 01       	movw	r26, r24
	
	M_DIO_Void_SetPinValue(TRIGGER_PIN, HIGH);
	_delay_us(10);
	M_DIO_Void_SetPinValue(TRIGGER_PIN, LOW);
	/*********************************************/
	while(GET_BIT(TIFR_REG, 5) == 0 && (65535 != Local_u32TimeOut))
    125a:	07 c0       	rjmp	.+14     	; 0x126a <UltraSonic_Update+0x3c>
	{
		Local_u32TimeOut++;
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	a1 1d       	adc	r26, r1
    1260:	b1 1d       	adc	r27, r1
    1262:	25 e3       	ldi	r18, 0x35	; 53
    1264:	2a 95       	dec	r18
    1266:	f1 f7       	brne	.-4      	; 0x1264 <UltraSonic_Update+0x36>
    1268:	00 00       	nop
	
	M_DIO_Void_SetPinValue(TRIGGER_PIN, HIGH);
	_delay_us(10);
	M_DIO_Void_SetPinValue(TRIGGER_PIN, LOW);
	/*********************************************/
	while(GET_BIT(TIFR_REG, 5) == 0 && (65535 != Local_u32TimeOut))
    126a:	08 b6       	in	r0, 0x38	; 56
    126c:	05 fc       	sbrc	r0, 5
    126e:	06 c0       	rjmp	.+12     	; 0x127c <UltraSonic_Update+0x4e>
    1270:	8f 3f       	cpi	r24, 0xFF	; 255
    1272:	2f ef       	ldi	r18, 0xFF	; 255
    1274:	92 07       	cpc	r25, r18
    1276:	a1 05       	cpc	r26, r1
    1278:	b1 05       	cpc	r27, r1
    127a:	81 f7       	brne	.-32     	; 0x125c <UltraSonic_Update+0x2e>
	{
		Local_u32TimeOut++;
		_delay_us(10);
	}
	TCNT1_REG = 0;
    127c:	1d bc       	out	0x2d, r1	; 45
    127e:	1c bc       	out	0x2c, r1	; 44
	TCCR1B_REG = 0x01; /*Falling edge*/
    1280:	21 e0       	ldi	r18, 0x01	; 1
    1282:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TIFR_REG,5);
    1284:	28 b7       	in	r18, 0x38	; 56
    1286:	20 62       	ori	r18, 0x20	; 32
    1288:	28 bf       	out	0x38, r18	; 56
	//SET_BIT(TIFR_REG,2);
	while(GET_BIT(TIFR_REG, 5) == 0 && (65535 != Local_u32TimeOut))
    128a:	07 c0       	rjmp	.+14     	; 0x129a <UltraSonic_Update+0x6c>
	{
		Local_u32TimeOut++;
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	a1 1d       	adc	r26, r1
    1290:	b1 1d       	adc	r27, r1
    1292:	25 e3       	ldi	r18, 0x35	; 53
    1294:	2a 95       	dec	r18
    1296:	f1 f7       	brne	.-4      	; 0x1294 <UltraSonic_Update+0x66>
    1298:	00 00       	nop
	}
	TCNT1_REG = 0;
	TCCR1B_REG = 0x01; /*Falling edge*/
	SET_BIT(TIFR_REG,5);
	//SET_BIT(TIFR_REG,2);
	while(GET_BIT(TIFR_REG, 5) == 0 && (65535 != Local_u32TimeOut))
    129a:	08 b6       	in	r0, 0x38	; 56
    129c:	05 fc       	sbrc	r0, 5
    129e:	06 c0       	rjmp	.+12     	; 0x12ac <UltraSonic_Update+0x7e>
    12a0:	8f 3f       	cpi	r24, 0xFF	; 255
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	92 07       	cpc	r25, r18
    12a6:	a1 05       	cpc	r26, r1
    12a8:	b1 05       	cpc	r27, r1
    12aa:	81 f7       	brne	.-32     	; 0x128c <UltraSonic_Update+0x5e>
		Local_u32TimeOut++;
		_delay_us(10);
	}
	
	/*************************************************/
	TimerOverflow  = 0;
    12ac:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <TimerOverflow>
    12b0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <TimerOverflow+0x1>
    12b4:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <TimerOverflow+0x2>
    12b8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <TimerOverflow+0x3>
	/**************************************************/
	//while(GET_BIT(TIFR_REG, 5) == 0);
	count = ICR1_REG + (65535 * TimerOverflow);
    12bc:	e6 b5       	in	r30, 0x26	; 38
    12be:	f7 b5       	in	r31, 0x27	; 39
    12c0:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <TimerOverflow>
    12c4:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <TimerOverflow+0x1>
    12c8:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <TimerOverflow+0x2>
    12cc:	50 91 b2 01 	lds	r21, 0x01B2	; 0x8001b2 <TimerOverflow+0x3>
    12d0:	af ef       	ldi	r26, 0xFF	; 255
    12d2:	bf ef       	ldi	r27, 0xFF	; 255
    12d4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__muluhisi3>
    12d8:	6e 0f       	add	r22, r30
    12da:	7f 1f       	adc	r23, r31
    12dc:	81 1d       	adc	r24, r1
    12de:	91 1d       	adc	r25, r1
    12e0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__floatunsisf>
    12e4:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <count>
    12e8:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <count+0x1>
    12ec:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <count+0x2>
    12f0:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <count+0x3>
	distacne = (double)(count / 466.47)/2;
    12f4:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <count>
    12f8:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <count+0x1>
    12fc:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <count+0x2>
    1300:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <count+0x3>
    1304:	29 e2       	ldi	r18, 0x29	; 41
    1306:	3c e3       	ldi	r19, 0x3C	; 60
    1308:	49 ee       	ldi	r20, 0xE9	; 233
    130a:	53 e4       	ldi	r21, 0x43	; 67
    130c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__divsf3>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__mulsf3>
    131c:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <distacne>
    1320:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <distacne+0x1>
    1324:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <distacne+0x2>
    1328:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <distacne+0x3>
	
	return distacne;
    132c:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <distacne>
    1330:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <distacne+0x1>
    1334:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <distacne+0x2>
    1338:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <distacne+0x3>
    133c:	08 95       	ret

0000133e <main>:

#include "Factory_Monitor.h"

int main(void)
{
	APP_Factory_voidInit();
    133e:	0e 94 ab 03 	call	0x756	; 0x756 <APP_Factory_voidInit>
	APP_Factory_voidStart();
    1342:	0e 94 cf 03 	call	0x79e	; 0x79e <APP_Factory_voidStart>
	return (0);
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	08 95       	ret

0000134c <ADC_Init>:


void ADC_Init(ADC_VoltageRef_Type vref,ADC_PREScaller_Type prescaller)
{
	//set vref
	switch (vref)
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	59 f0       	breq	.+22     	; 0x1366 <ADC_Init+0x1a>
    1350:	18 f0       	brcs	.+6      	; 0x1358 <ADC_Init+0xc>
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	79 f0       	breq	.+30     	; 0x1374 <ADC_Init+0x28>
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <ADC_Init+0x34>
	{
	case ADC_VCCREF:
		CLR_BIT(ADMUX,REFS1);
    1358:	87 b1       	in	r24, 0x07	; 7
    135a:	8f 77       	andi	r24, 0x7F	; 127
    135c:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS0);
    135e:	87 b1       	in	r24, 0x07	; 7
    1360:	80 64       	ori	r24, 0x40	; 64
    1362:	87 b9       	out	0x07, r24	; 7
		break;
    1364:	0d c0       	rjmp	.+26     	; 0x1380 <ADC_Init+0x34>
	case ADC_AREF:
		CLR_BIT(ADMUX,REFS1);
    1366:	87 b1       	in	r24, 0x07	; 7
    1368:	8f 77       	andi	r24, 0x7F	; 127
    136a:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS0);
    136c:	87 b1       	in	r24, 0x07	; 7
    136e:	8f 7b       	andi	r24, 0xBF	; 191
    1370:	87 b9       	out	0x07, r24	; 7
		break;
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <ADC_Init+0x34>
	case ADC_256REF:
		SET_BIT(ADMUX,REFS1);
    1374:	87 b1       	in	r24, 0x07	; 7
    1376:	80 68       	ori	r24, 0x80	; 128
    1378:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS0);
    137a:	87 b1       	in	r24, 0x07	; 7
    137c:	80 64       	ori	r24, 0x40	; 64
    137e:	87 b9       	out	0x07, r24	; 7
	default:
		//Nothing
		break;
	}
	//set right adjust
	CLR_BIT(ADMUX,ADLAR);
    1380:	87 b1       	in	r24, 0x07	; 7
    1382:	8f 7d       	andi	r24, 0xDF	; 223
    1384:	87 b9       	out	0x07, r24	; 7
	//set prescaller
	ADCSRA &= 0xf8;
    1386:	86 b1       	in	r24, 0x06	; 6
    1388:	88 7f       	andi	r24, 0xF8	; 248
    138a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= prescaller;
    138c:	86 b1       	in	r24, 0x06	; 6
    138e:	68 2b       	or	r22, r24
    1390:	66 b9       	out	0x06, r22	; 6
	//set enable bit.
	SET_BIT(ADCSRA,ADEN);
    1392:	86 b1       	in	r24, 0x06	; 6
    1394:	80 68       	ori	r24, 0x80	; 128
    1396:	86 b9       	out	0x06, r24	; 6
    1398:	08 95       	ret

0000139a <ADC_Read>:

u16	ADC_Read(ADC_Chanels_Type ch)
{
	u16 ADC_R=0;
	//chose chanel
	ADMUX &= 0xE0;
    139a:	97 b1       	in	r25, 0x07	; 7
    139c:	90 7e       	andi	r25, 0xE0	; 224
    139e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= ch;
    13a0:	97 b1       	in	r25, 0x07	; 7
    13a2:	89 2b       	or	r24, r25
    13a4:	87 b9       	out	0x07, r24	; 7
	//start conversion.
	SET_BIT(ADCSRA,ADSC);
    13a6:	86 b1       	in	r24, 0x06	; 6
    13a8:	80 64       	ori	r24, 0x40	; 64
    13aa:	86 b9       	out	0x06, r24	; 6
	while (GET_BIT(ADCSRA,ADSC));
    13ac:	36 99       	sbic	0x06, 6	; 6
    13ae:	fe cf       	rjmp	.-4      	; 0x13ac <ADC_Read+0x12>
	//Read ADCL & ADCH.
	//this one based on right adjust.
	ADC_R = ADCL | ((u16)ADCH << 8);
    13b0:	24 b1       	in	r18, 0x04	; 4
    13b2:	85 b1       	in	r24, 0x05	; 5
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	98 2f       	mov	r25, r24
    13b8:	88 27       	eor	r24, r24
	return (ADC_R);
}
    13ba:	82 2b       	or	r24, r18
    13bc:	08 95       	ret

000013be <ADC_Read_MiliVolt>:

u16 ADC_Read_MiliVolt(ADC_Chanels_Type ch)
{
	u16 volt=0;
	u16 AdcRead=ADC_Read(ch);
    13be:	0e 94 cd 09 	call	0x139a	; 0x139a <ADC_Read>
	
	volt = ((REF_VOLT* (u32)1000 * AdcRead)/(1024));
    13c2:	9c 01       	movw	r18, r24
    13c4:	a8 e8       	ldi	r26, 0x88	; 136
    13c6:	b3 e1       	ldi	r27, 0x13	; 19
    13c8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__umulhisi3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	07 2e       	mov	r0, r23
    13d2:	7a e0       	ldi	r23, 0x0A	; 10
    13d4:	b6 95       	lsr	r27
    13d6:	a7 95       	ror	r26
    13d8:	97 95       	ror	r25
    13da:	87 95       	ror	r24
    13dc:	7a 95       	dec	r23
    13de:	d1 f7       	brne	.-12     	; 0x13d4 <ADC_Read_MiliVolt+0x16>
    13e0:	70 2d       	mov	r23, r0
	
	return (volt);
}
    13e2:	08 95       	ret

000013e4 <M_DIO_Void_SetPinDirection>:
	switch(Local_U8_Group)
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    13e4:	9d ec       	ldi	r25, 0xCD	; 205
    13e6:	89 9f       	mul	r24, r25
    13e8:	91 2d       	mov	r25, r1
    13ea:	11 24       	eor	r1, r1
    13ec:	29 2f       	mov	r18, r25
    13ee:	26 95       	lsr	r18
    13f0:	26 95       	lsr	r18
    13f2:	26 95       	lsr	r18
    13f4:	22 0f       	add	r18, r18
    13f6:	32 2f       	mov	r19, r18
    13f8:	33 0f       	add	r19, r19
    13fa:	33 0f       	add	r19, r19
    13fc:	23 0f       	add	r18, r19
    13fe:	82 1b       	sub	r24, r18
    1400:	28 2f       	mov	r18, r24
    1402:	96 95       	lsr	r25
    1404:	96 95       	lsr	r25
    1406:	96 95       	lsr	r25
    1408:	66 23       	and	r22, r22
    140a:	19 f0       	breq	.+6      	; 0x1412 <M_DIO_Void_SetPinDirection+0x2e>
    140c:	61 30       	cpi	r22, 0x01	; 1
    140e:	e1 f1       	breq	.+120    	; 0x1488 <M_DIO_Void_SetPinDirection+0xa4>
    1410:	08 95       	ret
    1412:	92 30       	cpi	r25, 0x02	; 2
    1414:	a9 f0       	breq	.+42     	; 0x1440 <M_DIO_Void_SetPinDirection+0x5c>
    1416:	18 f4       	brcc	.+6      	; 0x141e <M_DIO_Void_SetPinDirection+0x3a>
    1418:	91 30       	cpi	r25, 0x01	; 1
    141a:	31 f0       	breq	.+12     	; 0x1428 <M_DIO_Void_SetPinDirection+0x44>
    141c:	08 95       	ret
    141e:	93 30       	cpi	r25, 0x03	; 3
    1420:	d9 f0       	breq	.+54     	; 0x1458 <M_DIO_Void_SetPinDirection+0x74>
    1422:	94 30       	cpi	r25, 0x04	; 4
    1424:	29 f1       	breq	.+74     	; 0x1470 <M_DIO_Void_SetPinDirection+0x8c>
    1426:	08 95       	ret
    1428:	3a b3       	in	r19, 0x1a	; 26
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <M_DIO_Void_SetPinDirection+0x50>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	2a 95       	dec	r18
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <M_DIO_Void_SetPinDirection+0x4c>
    1438:	80 95       	com	r24
    143a:	83 23       	and	r24, r19
    143c:	8a bb       	out	0x1a, r24	; 26
    143e:	08 95       	ret
    1440:	37 b3       	in	r19, 0x17	; 23
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <M_DIO_Void_SetPinDirection+0x68>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	2a 95       	dec	r18
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <M_DIO_Void_SetPinDirection+0x64>
    1450:	80 95       	com	r24
    1452:	83 23       	and	r24, r19
    1454:	87 bb       	out	0x17, r24	; 23
    1456:	08 95       	ret
    1458:	34 b3       	in	r19, 0x14	; 20
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <M_DIO_Void_SetPinDirection+0x80>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	2a 95       	dec	r18
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <M_DIO_Void_SetPinDirection+0x7c>
    1468:	80 95       	com	r24
    146a:	83 23       	and	r24, r19
    146c:	84 bb       	out	0x14, r24	; 20
    146e:	08 95       	ret
    1470:	31 b3       	in	r19, 0x11	; 17
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <M_DIO_Void_SetPinDirection+0x98>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	2a 95       	dec	r18
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <M_DIO_Void_SetPinDirection+0x94>
    1480:	80 95       	com	r24
    1482:	83 23       	and	r24, r19
    1484:	81 bb       	out	0x11, r24	; 17
    1486:	08 95       	ret
    1488:	92 30       	cpi	r25, 0x02	; 2
    148a:	a1 f0       	breq	.+40     	; 0x14b4 <M_DIO_Void_SetPinDirection+0xd0>
    148c:	18 f4       	brcc	.+6      	; 0x1494 <M_DIO_Void_SetPinDirection+0xb0>
    148e:	91 30       	cpi	r25, 0x01	; 1
    1490:	31 f0       	breq	.+12     	; 0x149e <M_DIO_Void_SetPinDirection+0xba>
    1492:	08 95       	ret
    1494:	93 30       	cpi	r25, 0x03	; 3
    1496:	c9 f0       	breq	.+50     	; 0x14ca <M_DIO_Void_SetPinDirection+0xe6>
    1498:	94 30       	cpi	r25, 0x04	; 4
    149a:	11 f1       	breq	.+68     	; 0x14e0 <M_DIO_Void_SetPinDirection+0xfc>
    149c:	08 95       	ret
    149e:	3a b3       	in	r19, 0x1a	; 26
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <M_DIO_Void_SetPinDirection+0xc6>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	2a 95       	dec	r18
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <M_DIO_Void_SetPinDirection+0xc2>
    14ae:	83 2b       	or	r24, r19
    14b0:	8a bb       	out	0x1a, r24	; 26
    14b2:	08 95       	ret
    14b4:	37 b3       	in	r19, 0x17	; 23
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <M_DIO_Void_SetPinDirection+0xdc>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	2a 95       	dec	r18
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <M_DIO_Void_SetPinDirection+0xd8>
    14c4:	83 2b       	or	r24, r19
    14c6:	87 bb       	out	0x17, r24	; 23
    14c8:	08 95       	ret
    14ca:	34 b3       	in	r19, 0x14	; 20
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <M_DIO_Void_SetPinDirection+0xf2>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	2a 95       	dec	r18
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <M_DIO_Void_SetPinDirection+0xee>
    14da:	83 2b       	or	r24, r19
    14dc:	84 bb       	out	0x14, r24	; 20
    14de:	08 95       	ret
    14e0:	31 b3       	in	r19, 0x11	; 17
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <M_DIO_Void_SetPinDirection+0x108>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	2a 95       	dec	r18
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <M_DIO_Void_SetPinDirection+0x104>
    14f0:	83 2b       	or	r24, r19
    14f2:	81 bb       	out	0x11, r24	; 17
    14f4:	08 95       	ret

000014f6 <M_DIO_Void_SetPinValue>:
    14f6:	9d ec       	ldi	r25, 0xCD	; 205
    14f8:	89 9f       	mul	r24, r25
    14fa:	91 2d       	mov	r25, r1
    14fc:	11 24       	eor	r1, r1
    14fe:	29 2f       	mov	r18, r25
    1500:	26 95       	lsr	r18
    1502:	26 95       	lsr	r18
    1504:	26 95       	lsr	r18
    1506:	22 0f       	add	r18, r18
    1508:	32 2f       	mov	r19, r18
    150a:	33 0f       	add	r19, r19
    150c:	33 0f       	add	r19, r19
    150e:	23 0f       	add	r18, r19
    1510:	82 1b       	sub	r24, r18
    1512:	28 2f       	mov	r18, r24
    1514:	96 95       	lsr	r25
    1516:	96 95       	lsr	r25
    1518:	96 95       	lsr	r25
    151a:	66 23       	and	r22, r22
    151c:	19 f0       	breq	.+6      	; 0x1524 <M_DIO_Void_SetPinValue+0x2e>
    151e:	61 30       	cpi	r22, 0x01	; 1
    1520:	e1 f1       	breq	.+120    	; 0x159a <M_DIO_Void_SetPinValue+0xa4>
    1522:	08 95       	ret
    1524:	92 30       	cpi	r25, 0x02	; 2
    1526:	a9 f0       	breq	.+42     	; 0x1552 <M_DIO_Void_SetPinValue+0x5c>
    1528:	18 f4       	brcc	.+6      	; 0x1530 <M_DIO_Void_SetPinValue+0x3a>
    152a:	91 30       	cpi	r25, 0x01	; 1
    152c:	31 f0       	breq	.+12     	; 0x153a <M_DIO_Void_SetPinValue+0x44>
    152e:	08 95       	ret
    1530:	93 30       	cpi	r25, 0x03	; 3
    1532:	d9 f0       	breq	.+54     	; 0x156a <M_DIO_Void_SetPinValue+0x74>
    1534:	94 30       	cpi	r25, 0x04	; 4
    1536:	29 f1       	breq	.+74     	; 0x1582 <M_DIO_Void_SetPinValue+0x8c>
    1538:	08 95       	ret
    153a:	3b b3       	in	r19, 0x1b	; 27
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <M_DIO_Void_SetPinValue+0x50>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	2a 95       	dec	r18
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <M_DIO_Void_SetPinValue+0x4c>
    154a:	80 95       	com	r24
    154c:	83 23       	and	r24, r19
    154e:	8b bb       	out	0x1b, r24	; 27
    1550:	08 95       	ret
    1552:	38 b3       	in	r19, 0x18	; 24
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 c0       	rjmp	.+4      	; 0x155e <M_DIO_Void_SetPinValue+0x68>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	2a 95       	dec	r18
    1560:	e2 f7       	brpl	.-8      	; 0x155a <M_DIO_Void_SetPinValue+0x64>
    1562:	80 95       	com	r24
    1564:	83 23       	and	r24, r19
    1566:	88 bb       	out	0x18, r24	; 24
    1568:	08 95       	ret
    156a:	35 b3       	in	r19, 0x15	; 21
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <M_DIO_Void_SetPinValue+0x80>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	2a 95       	dec	r18
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <M_DIO_Void_SetPinValue+0x7c>
    157a:	80 95       	com	r24
    157c:	83 23       	and	r24, r19
    157e:	85 bb       	out	0x15, r24	; 21
    1580:	08 95       	ret
    1582:	32 b3       	in	r19, 0x12	; 18
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 c0       	rjmp	.+4      	; 0x158e <M_DIO_Void_SetPinValue+0x98>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	2a 95       	dec	r18
    1590:	e2 f7       	brpl	.-8      	; 0x158a <M_DIO_Void_SetPinValue+0x94>
    1592:	80 95       	com	r24
    1594:	83 23       	and	r24, r19
    1596:	82 bb       	out	0x12, r24	; 18
    1598:	08 95       	ret
    159a:	92 30       	cpi	r25, 0x02	; 2
    159c:	a1 f0       	breq	.+40     	; 0x15c6 <M_DIO_Void_SetPinValue+0xd0>
    159e:	18 f4       	brcc	.+6      	; 0x15a6 <M_DIO_Void_SetPinValue+0xb0>
    15a0:	91 30       	cpi	r25, 0x01	; 1
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <M_DIO_Void_SetPinValue+0xba>
    15a4:	08 95       	ret
    15a6:	93 30       	cpi	r25, 0x03	; 3
    15a8:	c9 f0       	breq	.+50     	; 0x15dc <M_DIO_Void_SetPinValue+0xe6>
    15aa:	94 30       	cpi	r25, 0x04	; 4
    15ac:	11 f1       	breq	.+68     	; 0x15f2 <M_DIO_Void_SetPinValue+0xfc>
    15ae:	08 95       	ret
    15b0:	3b b3       	in	r19, 0x1b	; 27
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <M_DIO_Void_SetPinValue+0xc6>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	2a 95       	dec	r18
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <M_DIO_Void_SetPinValue+0xc2>
    15c0:	83 2b       	or	r24, r19
    15c2:	8b bb       	out	0x1b, r24	; 27
    15c4:	08 95       	ret
    15c6:	38 b3       	in	r19, 0x18	; 24
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <M_DIO_Void_SetPinValue+0xdc>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	2a 95       	dec	r18
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <M_DIO_Void_SetPinValue+0xd8>
    15d6:	83 2b       	or	r24, r19
    15d8:	88 bb       	out	0x18, r24	; 24
    15da:	08 95       	ret
    15dc:	35 b3       	in	r19, 0x15	; 21
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <M_DIO_Void_SetPinValue+0xf2>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	2a 95       	dec	r18
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <M_DIO_Void_SetPinValue+0xee>
    15ec:	83 2b       	or	r24, r19
    15ee:	85 bb       	out	0x15, r24	; 21
    15f0:	08 95       	ret
    15f2:	32 b3       	in	r19, 0x12	; 18
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <M_DIO_Void_SetPinValue+0x108>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	2a 95       	dec	r18
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <M_DIO_Void_SetPinValue+0x104>
    1602:	83 2b       	or	r24, r19
    1604:	82 bb       	out	0x12, r24	; 18
    1606:	08 95       	ret

00001608 <M_DIO_Void_GetPinValue>:
    1608:	9d ec       	ldi	r25, 0xCD	; 205
    160a:	89 9f       	mul	r24, r25
    160c:	91 2d       	mov	r25, r1
    160e:	11 24       	eor	r1, r1
    1610:	29 2f       	mov	r18, r25
    1612:	26 95       	lsr	r18
    1614:	26 95       	lsr	r18
    1616:	26 95       	lsr	r18
    1618:	22 0f       	add	r18, r18
    161a:	32 2f       	mov	r19, r18
    161c:	33 0f       	add	r19, r19
    161e:	33 0f       	add	r19, r19
    1620:	23 0f       	add	r18, r19
    1622:	82 1b       	sub	r24, r18
    1624:	28 2f       	mov	r18, r24
    1626:	89 2f       	mov	r24, r25
    1628:	86 95       	lsr	r24
    162a:	86 95       	lsr	r24
    162c:	86 95       	lsr	r24
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	91 f0       	breq	.+36     	; 0x1656 <M_DIO_Void_GetPinValue+0x4e>
    1632:	18 f4       	brcc	.+6      	; 0x163a <M_DIO_Void_GetPinValue+0x32>
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	31 f0       	breq	.+12     	; 0x1644 <M_DIO_Void_GetPinValue+0x3c>
    1638:	29 c0       	rjmp	.+82     	; 0x168c <M_DIO_Void_GetPinValue+0x84>
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	a9 f0       	breq	.+42     	; 0x1668 <M_DIO_Void_GetPinValue+0x60>
    163e:	84 30       	cpi	r24, 0x04	; 4
    1640:	e1 f0       	breq	.+56     	; 0x167a <M_DIO_Void_GetPinValue+0x72>
    1642:	24 c0       	rjmp	.+72     	; 0x168c <M_DIO_Void_GetPinValue+0x84>
    1644:	89 b3       	in	r24, 0x19	; 25
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <M_DIO_Void_GetPinValue+0x46>
    164a:	95 95       	asr	r25
    164c:	87 95       	ror	r24
    164e:	2a 95       	dec	r18
    1650:	e2 f7       	brpl	.-8      	; 0x164a <M_DIO_Void_GetPinValue+0x42>
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	08 95       	ret
    1656:	86 b3       	in	r24, 0x16	; 22
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <M_DIO_Void_GetPinValue+0x58>
    165c:	95 95       	asr	r25
    165e:	87 95       	ror	r24
    1660:	2a 95       	dec	r18
    1662:	e2 f7       	brpl	.-8      	; 0x165c <M_DIO_Void_GetPinValue+0x54>
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	08 95       	ret
    1668:	83 b3       	in	r24, 0x13	; 19
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <M_DIO_Void_GetPinValue+0x6a>
    166e:	95 95       	asr	r25
    1670:	87 95       	ror	r24
    1672:	2a 95       	dec	r18
    1674:	e2 f7       	brpl	.-8      	; 0x166e <M_DIO_Void_GetPinValue+0x66>
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	08 95       	ret
    167a:	80 b3       	in	r24, 0x10	; 16
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <M_DIO_Void_GetPinValue+0x7c>
    1680:	95 95       	asr	r25
    1682:	87 95       	ror	r24
    1684:	2a 95       	dec	r18
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <M_DIO_Void_GetPinValue+0x78>
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	08 95       	ret
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	08 95       	ret

00001690 <M_DIO_Void_SetPinPullUpRes>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1690:	9d ec       	ldi	r25, 0xCD	; 205
    1692:	89 9f       	mul	r24, r25
    1694:	91 2d       	mov	r25, r1
    1696:	11 24       	eor	r1, r1
    1698:	29 2f       	mov	r18, r25
    169a:	26 95       	lsr	r18
    169c:	26 95       	lsr	r18
    169e:	26 95       	lsr	r18
    16a0:	22 0f       	add	r18, r18
    16a2:	32 2f       	mov	r19, r18
    16a4:	33 0f       	add	r19, r19
    16a6:	33 0f       	add	r19, r19
    16a8:	23 0f       	add	r18, r19
    16aa:	82 1b       	sub	r24, r18
    16ac:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    16ae:	96 95       	lsr	r25
    16b0:	96 95       	lsr	r25
    16b2:	96 95       	lsr	r25
	switch(Copy_U8_State)
    16b4:	66 23       	and	r22, r22
    16b6:	19 f0       	breq	.+6      	; 0x16be <M_DIO_Void_SetPinPullUpRes+0x2e>
    16b8:	61 30       	cpi	r22, 0x01	; 1
    16ba:	e1 f1       	breq	.+120    	; 0x1734 <M_DIO_Void_SetPinPullUpRes+0xa4>
    16bc:	08 95       	ret
	{
	case DISABLE:
		switch(Local_U8_Group)
    16be:	92 30       	cpi	r25, 0x02	; 2
    16c0:	a9 f0       	breq	.+42     	; 0x16ec <M_DIO_Void_SetPinPullUpRes+0x5c>
    16c2:	18 f4       	brcc	.+6      	; 0x16ca <M_DIO_Void_SetPinPullUpRes+0x3a>
    16c4:	91 30       	cpi	r25, 0x01	; 1
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <M_DIO_Void_SetPinPullUpRes+0x44>
    16c8:	08 95       	ret
    16ca:	93 30       	cpi	r25, 0x03	; 3
    16cc:	d9 f0       	breq	.+54     	; 0x1704 <M_DIO_Void_SetPinPullUpRes+0x74>
    16ce:	94 30       	cpi	r25, 0x04	; 4
    16d0:	29 f1       	breq	.+74     	; 0x171c <M_DIO_Void_SetPinPullUpRes+0x8c>
    16d2:	08 95       	ret
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    16d4:	3b b3       	in	r19, 0x1b	; 27
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <M_DIO_Void_SetPinPullUpRes+0x50>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	2a 95       	dec	r18
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <M_DIO_Void_SetPinPullUpRes+0x4c>
    16e4:	80 95       	com	r24
    16e6:	83 23       	and	r24, r19
    16e8:	8b bb       	out	0x1b, r24	; 27
    16ea:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    16ec:	38 b3       	in	r19, 0x18	; 24
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <M_DIO_Void_SetPinPullUpRes+0x68>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	2a 95       	dec	r18
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <M_DIO_Void_SetPinPullUpRes+0x64>
    16fc:	80 95       	com	r24
    16fe:	83 23       	and	r24, r19
    1700:	88 bb       	out	0x18, r24	; 24
    1702:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1704:	35 b3       	in	r19, 0x15	; 21
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <M_DIO_Void_SetPinPullUpRes+0x80>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	2a 95       	dec	r18
    1712:	e2 f7       	brpl	.-8      	; 0x170c <M_DIO_Void_SetPinPullUpRes+0x7c>
    1714:	80 95       	com	r24
    1716:	83 23       	and	r24, r19
    1718:	85 bb       	out	0x15, r24	; 21
    171a:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    171c:	32 b3       	in	r19, 0x12	; 18
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <M_DIO_Void_SetPinPullUpRes+0x98>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	2a 95       	dec	r18
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <M_DIO_Void_SetPinPullUpRes+0x94>
    172c:	80 95       	com	r24
    172e:	83 23       	and	r24, r19
    1730:	82 bb       	out	0x12, r24	; 18
    1732:	08 95       	ret
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    1734:	92 30       	cpi	r25, 0x02	; 2
    1736:	a1 f0       	breq	.+40     	; 0x1760 <M_DIO_Void_SetPinPullUpRes+0xd0>
    1738:	18 f4       	brcc	.+6      	; 0x1740 <M_DIO_Void_SetPinPullUpRes+0xb0>
    173a:	91 30       	cpi	r25, 0x01	; 1
    173c:	31 f0       	breq	.+12     	; 0x174a <M_DIO_Void_SetPinPullUpRes+0xba>
    173e:	08 95       	ret
    1740:	93 30       	cpi	r25, 0x03	; 3
    1742:	c9 f0       	breq	.+50     	; 0x1776 <M_DIO_Void_SetPinPullUpRes+0xe6>
    1744:	94 30       	cpi	r25, 0x04	; 4
    1746:	11 f1       	breq	.+68     	; 0x178c <M_DIO_Void_SetPinPullUpRes+0xfc>
    1748:	08 95       	ret
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    174a:	3b b3       	in	r19, 0x1b	; 27
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <M_DIO_Void_SetPinPullUpRes+0xc6>
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	2a 95       	dec	r18
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <M_DIO_Void_SetPinPullUpRes+0xc2>
    175a:	83 2b       	or	r24, r19
    175c:	8b bb       	out	0x1b, r24	; 27
    175e:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1760:	38 b3       	in	r19, 0x18	; 24
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <M_DIO_Void_SetPinPullUpRes+0xdc>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	2a 95       	dec	r18
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <M_DIO_Void_SetPinPullUpRes+0xd8>
    1770:	83 2b       	or	r24, r19
    1772:	88 bb       	out	0x18, r24	; 24
    1774:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1776:	35 b3       	in	r19, 0x15	; 21
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <M_DIO_Void_SetPinPullUpRes+0xf2>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	2a 95       	dec	r18
    1784:	e2 f7       	brpl	.-8      	; 0x177e <M_DIO_Void_SetPinPullUpRes+0xee>
    1786:	83 2b       	or	r24, r19
    1788:	85 bb       	out	0x15, r24	; 21
    178a:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    178c:	32 b3       	in	r19, 0x12	; 18
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <M_DIO_Void_SetPinPullUpRes+0x108>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	2a 95       	dec	r18
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <M_DIO_Void_SetPinPullUpRes+0x104>
    179c:	83 2b       	or	r24, r19
    179e:	82 bb       	out	0x12, r24	; 18
    17a0:	08 95       	ret

000017a2 <EEPROM_Send>:
#include "EEPROM_interface.h"
#include "EEPROM_Private.h"

void EEPROM_Send(u16 address,u8 data)
{
	while(1 == GET_BIT(EECR,EEWE)); //wait till other send operation finish.
    17a2:	e1 99       	sbic	0x1c, 1	; 28
    17a4:	fe cf       	rjmp	.-4      	; 0x17a2 <EEPROM_Send>
	EEAR = address;
    17a6:	9f bb       	out	0x1f, r25	; 31
    17a8:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
    17aa:	6d bb       	out	0x1d, r22	; 29
	//must close interrupt.
	cli();
    17ac:	f8 94       	cli
	SET_BIT(EECR, EEMWE);
    17ae:	8c b3       	in	r24, 0x1c	; 28
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,EEWE);
    17b4:	8c b3       	in	r24, 0x1c	; 28
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	8c bb       	out	0x1c, r24	; 28
	sei();
    17ba:	78 94       	sei
    17bc:	08 95       	ret

000017be <EEPROM_Receive>:
}
u8	EEPROM_Receive(u16 address,u8 *data)
{
	u8 error=0;
	EEAR = address;
    17be:	9f bb       	out	0x1f, r25	; 31
    17c0:	8e bb       	out	0x1e, r24	; 30
	if(NULL_PTR == data)
    17c2:	61 15       	cp	r22, r1
    17c4:	71 05       	cpc	r23, r1
    17c6:	69 f0       	breq	.+26     	; 0x17e2 <EEPROM_Receive+0x24>
	{
		error =1;
	}
	else if( (address < 0) || (address > 1024))
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	94 40       	sbci	r25, 0x04	; 4
    17cc:	60 f4       	brcc	.+24     	; 0x17e6 <EEPROM_Receive+0x28>
	{
		error =2;
	}
	else
	{
		while(1 == GET_BIT(EECR,EEWE));
    17ce:	e1 99       	sbic	0x1c, 1	; 28
    17d0:	fe cf       	rjmp	.-4      	; 0x17ce <EEPROM_Receive+0x10>
		SET_BIT(EECR,EERE);
    17d2:	8c b3       	in	r24, 0x1c	; 28
    17d4:	81 60       	ori	r24, 0x01	; 1
    17d6:	8c bb       	out	0x1c, r24	; 28
		*data = EEDR;	
    17d8:	8d b3       	in	r24, 0x1d	; 29
    17da:	fb 01       	movw	r30, r22
    17dc:	80 83       	st	Z, r24
	SET_BIT(EECR,EEWE);
	sei();
}
u8	EEPROM_Receive(u16 address,u8 *data)
{
	u8 error=0;
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	08 95       	ret
	EEAR = address;
	if(NULL_PTR == data)
	{
		error =1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	08 95       	ret
	}
	else if( (address < 0) || (address > 1024))
	{
		error =2;
    17e6:	82 e0       	ldi	r24, 0x02	; 2
		SET_BIT(EECR,EERE);
		*data = EEDR;	
	}
	
	return (error);
    17e8:	08 95       	ret

000017ea <MCAL_EXTI_voidInitINT1>:
		SET_BIT(GICR,INT2_ENABLE); /*Enable interrupt*/
	}
	else if((EXTI_RISING_EDGE == Copy_SenseType))
	{
		CLR_BIT(MCUCSR,ISC2);
		SET_BIT(GICR,INT2_ENABLE); /*Enable interrupt*/
    17ea:	95 b7       	in	r25, 0x35	; 53
    17ec:	93 7f       	andi	r25, 0xF3	; 243
    17ee:	95 bf       	out	0x35, r25	; 53
    17f0:	25 b7       	in	r18, 0x35	; 53
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	82 2b       	or	r24, r18
    17fe:	85 bf       	out	0x35, r24	; 53
    1800:	8b b7       	in	r24, 0x3b	; 59
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	8b bf       	out	0x3b, r24	; 59
    1806:	08 95       	ret

00001808 <MCAL_EXTI_voidEnableInterrupt>:
	}
}

void MCAL_EXTI_voidEnableInterrupt(EXTI_INT_t Copy_Interrupt,EXTI_SenseControl_t Copy_SenseType)
{
	switch(Copy_Interrupt)
    1808:	86 30       	cpi	r24, 0x06	; 6
    180a:	29 f0       	breq	.+10     	; 0x1816 <MCAL_EXTI_voidEnableInterrupt+0xe>
    180c:	87 30       	cpi	r24, 0x07	; 7
    180e:	69 f0       	breq	.+26     	; 0x182a <MCAL_EXTI_voidEnableInterrupt+0x22>
    1810:	85 30       	cpi	r24, 0x05	; 5
    1812:	59 f5       	brne	.+86     	; 0x186a <MCAL_EXTI_voidEnableInterrupt+0x62>
    1814:	19 c0       	rjmp	.+50     	; 0x1848 <MCAL_EXTI_voidEnableInterrupt+0x40>
	{
	case EXTI_INT0:
		/*Clear before set*/
		MCUCR &= (0xfd);
    1816:	85 b7       	in	r24, 0x35	; 53
    1818:	8d 7f       	andi	r24, 0xFD	; 253
    181a:	85 bf       	out	0x35, r24	; 53
		/*Set Sense control*/
		MCUCR |= (Copy_SenseType);
    181c:	85 b7       	in	r24, 0x35	; 53
    181e:	68 2b       	or	r22, r24
    1820:	65 bf       	out	0x35, r22	; 53
		SET_BIT(GICR,INT0_ENABLE); /*Enable interrupt*/
    1822:	8b b7       	in	r24, 0x3b	; 59
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	8b bf       	out	0x3b, r24	; 59
		break;
    1828:	08 95       	ret
	case EXTI_INT1:
		/*Clear before set*/
		MCUCR &= (0xf3);
    182a:	85 b7       	in	r24, 0x35	; 53
    182c:	83 7f       	andi	r24, 0xF3	; 243
    182e:	85 bf       	out	0x35, r24	; 53
		/*Set Sense control*/
		MCUCR |= (Copy_SenseType<<2);
    1830:	85 b7       	in	r24, 0x35	; 53
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	66 0f       	add	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	66 0f       	add	r22, r22
    183a:	77 1f       	adc	r23, r23
    183c:	68 2b       	or	r22, r24
    183e:	65 bf       	out	0x35, r22	; 53
		SET_BIT(GICR,INT1_ENABLE); /*Enable interrupt*/
    1840:	8b b7       	in	r24, 0x3b	; 59
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	8b bf       	out	0x3b, r24	; 59
		break;
    1846:	08 95       	ret
	case EXTI_INT2:
		if((EXTI_FALLING_EDGE == Copy_SenseType))
    1848:	62 30       	cpi	r22, 0x02	; 2
    184a:	39 f4       	brne	.+14     	; 0x185a <MCAL_EXTI_voidEnableInterrupt+0x52>
		{
			SET_BIT(MCUCSR,ISC2);
    184c:	84 b7       	in	r24, 0x34	; 52
    184e:	80 64       	ori	r24, 0x40	; 64
    1850:	84 bf       	out	0x34, r24	; 52
			SET_BIT(GICR,INT2_ENABLE); /*Enable interrupt*/
    1852:	8b b7       	in	r24, 0x3b	; 59
    1854:	80 62       	ori	r24, 0x20	; 32
    1856:	8b bf       	out	0x3b, r24	; 59
    1858:	08 95       	ret
		}
		else if((EXTI_RISING_EDGE == Copy_SenseType))
    185a:	63 30       	cpi	r22, 0x03	; 3
    185c:	31 f4       	brne	.+12     	; 0x186a <MCAL_EXTI_voidEnableInterrupt+0x62>
		{
			CLR_BIT(MCUCSR,ISC2);
    185e:	84 b7       	in	r24, 0x34	; 52
    1860:	8f 7b       	andi	r24, 0xBF	; 191
    1862:	84 bf       	out	0x34, r24	; 52
			SET_BIT(GICR,INT2_ENABLE); /*Enable interrupt*/
    1864:	8b b7       	in	r24, 0x3b	; 59
    1866:	80 62       	ori	r24, 0x20	; 32
    1868:	8b bf       	out	0x3b, r24	; 59
    186a:	08 95       	ret

0000186c <MCAL_EXTI_voidDisableInterrupt>:
		break;
	}
}
void MCAL_EXTI_voidDisableInterrupt(EXTI_INT_t Copy_Interrupt)
{
	switch(Copy_Interrupt)
    186c:	86 30       	cpi	r24, 0x06	; 6
    186e:	29 f0       	breq	.+10     	; 0x187a <MCAL_EXTI_voidDisableInterrupt+0xe>
    1870:	87 30       	cpi	r24, 0x07	; 7
    1872:	39 f0       	breq	.+14     	; 0x1882 <MCAL_EXTI_voidDisableInterrupt+0x16>
    1874:	85 30       	cpi	r24, 0x05	; 5
    1876:	61 f4       	brne	.+24     	; 0x1890 <MCAL_EXTI_voidDisableInterrupt+0x24>
    1878:	08 c0       	rjmp	.+16     	; 0x188a <MCAL_EXTI_voidDisableInterrupt+0x1e>
	{
	case EXTI_INT0:
		CLR_BIT(GICR,INT0_ENABLE); /*Disable interrupt*/
    187a:	8b b7       	in	r24, 0x3b	; 59
    187c:	8f 7b       	andi	r24, 0xBF	; 191
    187e:	8b bf       	out	0x3b, r24	; 59
		break;
    1880:	08 95       	ret
	case EXTI_INT1:
		CLR_BIT(GICR,INT1_ENABLE); /*Disable interrupt*/
    1882:	8b b7       	in	r24, 0x3b	; 59
    1884:	8f 77       	andi	r24, 0x7F	; 127
    1886:	8b bf       	out	0x3b, r24	; 59
		break;
    1888:	08 95       	ret
	case EXTI_INT2:
		CLR_BIT(GICR,INT2_ENABLE); /*Disable interrupt*/
    188a:	8b b7       	in	r24, 0x3b	; 59
    188c:	8f 7d       	andi	r24, 0xDF	; 223
    188e:	8b bf       	out	0x3b, r24	; 59
    1890:	08 95       	ret

00001892 <MCAL_EXTI_voidSetCallBack>:
	}
}

void MCAL_EXTI_voidSetCallBack(EXTI_INT_t Copy_Interrupt, void (*Copy_PF)(void))
{
	switch(Copy_Interrupt)
    1892:	86 30       	cpi	r24, 0x06	; 6
    1894:	29 f0       	breq	.+10     	; 0x18a0 <MCAL_EXTI_voidSetCallBack+0xe>
    1896:	87 30       	cpi	r24, 0x07	; 7
    1898:	41 f0       	breq	.+16     	; 0x18aa <MCAL_EXTI_voidSetCallBack+0x18>
    189a:	85 30       	cpi	r24, 0x05	; 5
    189c:	79 f4       	brne	.+30     	; 0x18bc <MCAL_EXTI_voidSetCallBack+0x2a>
    189e:	0a c0       	rjmp	.+20     	; 0x18b4 <MCAL_EXTI_voidSetCallBack+0x22>
	{
	case EXTI_INT0:
		PF_INT0 = Copy_PF;
    18a0:	70 93 b8 01 	sts	0x01B8, r23	; 0x8001b8 <PF_INT0+0x1>
    18a4:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <PF_INT0>
		break;
    18a8:	08 95       	ret
	case EXTI_INT1:
		PF_INT1 = Copy_PF;
    18aa:	70 93 b6 01 	sts	0x01B6, r23	; 0x8001b6 <PF_INT1+0x1>
    18ae:	60 93 b5 01 	sts	0x01B5, r22	; 0x8001b5 <PF_INT1>
		break;
    18b2:	08 95       	ret
	case EXTI_INT2:
		PF_INT2 = Copy_PF;
    18b4:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <PF_INT2+0x1>
    18b8:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <PF_INT2>
    18bc:	08 95       	ret

000018be <__vector_1>:
/*************************** ISR *************************/

/*****INT0 ISR******/

ISR(INT0_VECT)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
	if(NULL_PTR != PF_INT0)
    18e0:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <PF_INT0>
    18e4:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <PF_INT0+0x1>
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	09 f0       	breq	.+2      	; 0x18ee <__vector_1+0x30>
	{
		PF_INT0();
    18ec:	09 95       	icall
	else
	{
		/*Null pointer passed*/
	}
	
}
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <__vector_2>:
/*****INT1 ISR******/

ISR(INT1_VECT)
{
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	2f 93       	push	r18
    191c:	3f 93       	push	r19
    191e:	4f 93       	push	r20
    1920:	5f 93       	push	r21
    1922:	6f 93       	push	r22
    1924:	7f 93       	push	r23
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	af 93       	push	r26
    192c:	bf 93       	push	r27
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
	if(NULL_PTR != PF_INT1)
    1932:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <PF_INT1>
    1936:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <PF_INT1+0x1>
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	09 f0       	breq	.+2      	; 0x1940 <__vector_2+0x30>
	{
		PF_INT1();
    193e:	09 95       	icall
	}
	else
	{
		/*Null pointer passed*/
	}
}
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	bf 91       	pop	r27
    1946:	af 91       	pop	r26
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	7f 91       	pop	r23
    194e:	6f 91       	pop	r22
    1950:	5f 91       	pop	r21
    1952:	4f 91       	pop	r20
    1954:	3f 91       	pop	r19
    1956:	2f 91       	pop	r18
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <__vector_3>:
/*****INT2 ISR******/

ISR(INT2_VECT)
{
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	2f 93       	push	r18
    196e:	3f 93       	push	r19
    1970:	4f 93       	push	r20
    1972:	5f 93       	push	r21
    1974:	6f 93       	push	r22
    1976:	7f 93       	push	r23
    1978:	8f 93       	push	r24
    197a:	9f 93       	push	r25
    197c:	af 93       	push	r26
    197e:	bf 93       	push	r27
    1980:	ef 93       	push	r30
    1982:	ff 93       	push	r31
	if(NULL_PTR != PF_INT2)
    1984:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <PF_INT2>
    1988:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <PF_INT2+0x1>
    198c:	30 97       	sbiw	r30, 0x00	; 0
    198e:	09 f0       	breq	.+2      	; 0x1992 <__vector_3+0x30>
	{
		PF_INT2();
    1990:	09 95       	icall
	}
	else
	{
		/*Null pointer passed*/
	}
}
    1992:	ff 91       	pop	r31
    1994:	ef 91       	pop	r30
    1996:	bf 91       	pop	r27
    1998:	af 91       	pop	r26
    199a:	9f 91       	pop	r25
    199c:	8f 91       	pop	r24
    199e:	7f 91       	pop	r23
    19a0:	6f 91       	pop	r22
    19a2:	5f 91       	pop	r21
    19a4:	4f 91       	pop	r20
    19a6:	3f 91       	pop	r19
    19a8:	2f 91       	pop	r18
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	0f 90       	pop	r0
    19b0:	1f 90       	pop	r1
    19b2:	18 95       	reti

000019b4 <__vector_10>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
ISR(TIMER0_COMP_vect)
{
    19b4:	1f 92       	push	r1
    19b6:	0f 92       	push	r0
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	0f 92       	push	r0
    19bc:	11 24       	eor	r1, r1
    19be:	2f 93       	push	r18
    19c0:	3f 93       	push	r19
    19c2:	4f 93       	push	r20
    19c4:	5f 93       	push	r21
    19c6:	6f 93       	push	r22
    19c8:	7f 93       	push	r23
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	af 93       	push	r26
    19d0:	bf 93       	push	r27
    19d2:	ef 93       	push	r30
    19d4:	ff 93       	push	r31
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    19d6:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <Local_U32_Counter.1706>
    19da:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <Local_U32_Counter.1706+0x1>
    19de:	a0 91 bb 01 	lds	r26, 0x01BB	; 0x8001bb <Local_U32_Counter.1706+0x2>
    19e2:	b0 91 bc 01 	lds	r27, 0x01BC	; 0x8001bc <Local_U32_Counter.1706+0x3>
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	a1 1d       	adc	r26, r1
    19ea:	b1 1d       	adc	r27, r1
    19ec:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <Local_U32_Counter.1706>
    19f0:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <Local_U32_Counter.1706+0x1>
    19f4:	a0 93 bb 01 	sts	0x01BB, r26	; 0x8001bb <Local_U32_Counter.1706+0x2>
    19f8:	b0 93 bc 01 	sts	0x01BC, r27	; 0x8001bc <Local_U32_Counter.1706+0x3>
	if(Local_U32_Counter == Timer_U32_NumOfCM)
    19fc:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <Timer_U32_NumOfCM>
    1a00:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <Timer_U32_NumOfCM+0x1>
    1a04:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <Timer_U32_NumOfCM+0x2>
    1a08:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <Timer_U32_NumOfCM+0x3>
    1a0c:	84 17       	cp	r24, r20
    1a0e:	95 07       	cpc	r25, r21
    1a10:	a6 07       	cpc	r26, r22
    1a12:	b7 07       	cpc	r27, r23
    1a14:	69 f4       	brne	.+26     	; 0x1a30 <__vector_10+0x7c>
	{
		Timer_CallBack();
    1a16:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <Timer_CallBack>
    1a1a:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <Timer_CallBack+0x1>
    1a1e:	09 95       	icall
		Local_U32_Counter = 0;
    1a20:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <Local_U32_Counter.1706>
    1a24:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <Local_U32_Counter.1706+0x1>
    1a28:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <Local_U32_Counter.1706+0x2>
    1a2c:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <Local_U32_Counter.1706+0x3>
	}
}
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <__divsf3>:
    1a52:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__divsf3x>
    1a56:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__fp_round>
    1a5a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscB>
    1a5e:	58 f0       	brcs	.+22     	; 0x1a76 <__divsf3+0x24>
    1a60:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscA>
    1a64:	40 f0       	brcs	.+16     	; 0x1a76 <__divsf3+0x24>
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <__divsf3+0x20>
    1a68:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6a:	29 f0       	breq	.+10     	; 0x1a76 <__divsf3+0x24>
    1a6c:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1a70:	51 11       	cpse	r21, r1
    1a72:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>
    1a76:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__fp_nan>

00001a7a <__divsf3x>:
    1a7a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_split3>
    1a7e:	68 f3       	brcs	.-38     	; 0x1a5a <__divsf3+0x8>

00001a80 <__divsf3_pse>:
    1a80:	99 23       	and	r25, r25
    1a82:	b1 f3       	breq	.-20     	; 0x1a70 <__divsf3+0x1e>
    1a84:	55 23       	and	r21, r21
    1a86:	91 f3       	breq	.-28     	; 0x1a6c <__divsf3+0x1a>
    1a88:	95 1b       	sub	r25, r21
    1a8a:	55 0b       	sbc	r21, r21
    1a8c:	bb 27       	eor	r27, r27
    1a8e:	aa 27       	eor	r26, r26
    1a90:	62 17       	cp	r22, r18
    1a92:	73 07       	cpc	r23, r19
    1a94:	84 07       	cpc	r24, r20
    1a96:	38 f0       	brcs	.+14     	; 0x1aa6 <__divsf3_pse+0x26>
    1a98:	9f 5f       	subi	r25, 0xFF	; 255
    1a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	44 1f       	adc	r20, r20
    1aa2:	aa 1f       	adc	r26, r26
    1aa4:	a9 f3       	breq	.-22     	; 0x1a90 <__divsf3_pse+0x10>
    1aa6:	35 d0       	rcall	.+106    	; 0x1b12 <__divsf3_pse+0x92>
    1aa8:	0e 2e       	mov	r0, r30
    1aaa:	3a f0       	brmi	.+14     	; 0x1aba <__divsf3_pse+0x3a>
    1aac:	e0 e8       	ldi	r30, 0x80	; 128
    1aae:	32 d0       	rcall	.+100    	; 0x1b14 <__divsf3_pse+0x94>
    1ab0:	91 50       	subi	r25, 0x01	; 1
    1ab2:	50 40       	sbci	r21, 0x00	; 0
    1ab4:	e6 95       	lsr	r30
    1ab6:	00 1c       	adc	r0, r0
    1ab8:	ca f7       	brpl	.-14     	; 0x1aac <__divsf3_pse+0x2c>
    1aba:	2b d0       	rcall	.+86     	; 0x1b12 <__divsf3_pse+0x92>
    1abc:	fe 2f       	mov	r31, r30
    1abe:	29 d0       	rcall	.+82     	; 0x1b12 <__divsf3_pse+0x92>
    1ac0:	66 0f       	add	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	26 17       	cp	r18, r22
    1aca:	37 07       	cpc	r19, r23
    1acc:	48 07       	cpc	r20, r24
    1ace:	ab 07       	cpc	r26, r27
    1ad0:	b0 e8       	ldi	r27, 0x80	; 128
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <__divsf3_pse+0x56>
    1ad4:	bb 0b       	sbc	r27, r27
    1ad6:	80 2d       	mov	r24, r0
    1ad8:	bf 01       	movw	r22, r30
    1ada:	ff 27       	eor	r31, r31
    1adc:	93 58       	subi	r25, 0x83	; 131
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	3a f0       	brmi	.+14     	; 0x1af0 <__divsf3_pse+0x70>
    1ae2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	78 f0       	brcs	.+30     	; 0x1b06 <__divsf3_pse+0x86>
    1ae8:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1aec:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>
    1af0:	5f 3f       	cpi	r21, 0xFF	; 255
    1af2:	e4 f3       	brlt	.-8      	; 0x1aec <__divsf3_pse+0x6c>
    1af4:	98 3e       	cpi	r25, 0xE8	; 232
    1af6:	d4 f3       	brlt	.-12     	; 0x1aec <__divsf3_pse+0x6c>
    1af8:	86 95       	lsr	r24
    1afa:	77 95       	ror	r23
    1afc:	67 95       	ror	r22
    1afe:	b7 95       	ror	r27
    1b00:	f7 95       	ror	r31
    1b02:	9f 5f       	subi	r25, 0xFF	; 255
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__divsf3_pse+0x78>
    1b06:	88 0f       	add	r24, r24
    1b08:	91 1d       	adc	r25, r1
    1b0a:	96 95       	lsr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	97 f9       	bld	r25, 7
    1b10:	08 95       	ret
    1b12:	e1 e0       	ldi	r30, 0x01	; 1
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	bb 1f       	adc	r27, r27
    1b1c:	62 17       	cp	r22, r18
    1b1e:	73 07       	cpc	r23, r19
    1b20:	84 07       	cpc	r24, r20
    1b22:	ba 07       	cpc	r27, r26
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <__divsf3_pse+0xae>
    1b26:	62 1b       	sub	r22, r18
    1b28:	73 0b       	sbc	r23, r19
    1b2a:	84 0b       	sbc	r24, r20
    1b2c:	ba 0b       	sbc	r27, r26
    1b2e:	ee 1f       	adc	r30, r30
    1b30:	88 f7       	brcc	.-30     	; 0x1b14 <__divsf3_pse+0x94>
    1b32:	e0 95       	com	r30
    1b34:	08 95       	ret

00001b36 <__fixunssfsi>:
    1b36:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__fp_splitA>
    1b3a:	88 f0       	brcs	.+34     	; 0x1b5e <__fixunssfsi+0x28>
    1b3c:	9f 57       	subi	r25, 0x7F	; 127
    1b3e:	98 f0       	brcs	.+38     	; 0x1b66 <__fixunssfsi+0x30>
    1b40:	b9 2f       	mov	r27, r25
    1b42:	99 27       	eor	r25, r25
    1b44:	b7 51       	subi	r27, 0x17	; 23
    1b46:	b0 f0       	brcs	.+44     	; 0x1b74 <__fixunssfsi+0x3e>
    1b48:	e1 f0       	breq	.+56     	; 0x1b82 <__fixunssfsi+0x4c>
    1b4a:	66 0f       	add	r22, r22
    1b4c:	77 1f       	adc	r23, r23
    1b4e:	88 1f       	adc	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	1a f0       	brmi	.+6      	; 0x1b5a <__fixunssfsi+0x24>
    1b54:	ba 95       	dec	r27
    1b56:	c9 f7       	brne	.-14     	; 0x1b4a <__fixunssfsi+0x14>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <__fixunssfsi+0x4c>
    1b5a:	b1 30       	cpi	r27, 0x01	; 1
    1b5c:	91 f0       	breq	.+36     	; 0x1b82 <__fixunssfsi+0x4c>
    1b5e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__fp_zero>
    1b62:	b1 e0       	ldi	r27, 0x01	; 1
    1b64:	08 95       	ret
    1b66:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_zero>
    1b6a:	67 2f       	mov	r22, r23
    1b6c:	78 2f       	mov	r23, r24
    1b6e:	88 27       	eor	r24, r24
    1b70:	b8 5f       	subi	r27, 0xF8	; 248
    1b72:	39 f0       	breq	.+14     	; 0x1b82 <__fixunssfsi+0x4c>
    1b74:	b9 3f       	cpi	r27, 0xF9	; 249
    1b76:	cc f3       	brlt	.-14     	; 0x1b6a <__fixunssfsi+0x34>
    1b78:	86 95       	lsr	r24
    1b7a:	77 95       	ror	r23
    1b7c:	67 95       	ror	r22
    1b7e:	b3 95       	inc	r27
    1b80:	d9 f7       	brne	.-10     	; 0x1b78 <__fixunssfsi+0x42>
    1b82:	3e f4       	brtc	.+14     	; 0x1b92 <__fixunssfsi+0x5c>
    1b84:	90 95       	com	r25
    1b86:	80 95       	com	r24
    1b88:	70 95       	com	r23
    1b8a:	61 95       	neg	r22
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	08 95       	ret

00001b94 <__floatunsisf>:
    1b94:	e8 94       	clt
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <__floatsisf+0x12>

00001b98 <__floatsisf>:
    1b98:	97 fb       	bst	r25, 7
    1b9a:	3e f4       	brtc	.+14     	; 0x1baa <__floatsisf+0x12>
    1b9c:	90 95       	com	r25
    1b9e:	80 95       	com	r24
    1ba0:	70 95       	com	r23
    1ba2:	61 95       	neg	r22
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	99 23       	and	r25, r25
    1bac:	a9 f0       	breq	.+42     	; 0x1bd8 <__floatsisf+0x40>
    1bae:	f9 2f       	mov	r31, r25
    1bb0:	96 e9       	ldi	r25, 0x96	; 150
    1bb2:	bb 27       	eor	r27, r27
    1bb4:	93 95       	inc	r25
    1bb6:	f6 95       	lsr	r31
    1bb8:	87 95       	ror	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	b7 95       	ror	r27
    1bc0:	f1 11       	cpse	r31, r1
    1bc2:	f8 cf       	rjmp	.-16     	; 0x1bb4 <__floatsisf+0x1c>
    1bc4:	fa f4       	brpl	.+62     	; 0x1c04 <__floatsisf+0x6c>
    1bc6:	bb 0f       	add	r27, r27
    1bc8:	11 f4       	brne	.+4      	; 0x1bce <__floatsisf+0x36>
    1bca:	60 ff       	sbrs	r22, 0
    1bcc:	1b c0       	rjmp	.+54     	; 0x1c04 <__floatsisf+0x6c>
    1bce:	6f 5f       	subi	r22, 0xFF	; 255
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	16 c0       	rjmp	.+44     	; 0x1c04 <__floatsisf+0x6c>
    1bd8:	88 23       	and	r24, r24
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <__floatsisf+0x48>
    1bdc:	96 e9       	ldi	r25, 0x96	; 150
    1bde:	11 c0       	rjmp	.+34     	; 0x1c02 <__floatsisf+0x6a>
    1be0:	77 23       	and	r23, r23
    1be2:	21 f0       	breq	.+8      	; 0x1bec <__floatsisf+0x54>
    1be4:	9e e8       	ldi	r25, 0x8E	; 142
    1be6:	87 2f       	mov	r24, r23
    1be8:	76 2f       	mov	r23, r22
    1bea:	05 c0       	rjmp	.+10     	; 0x1bf6 <__floatsisf+0x5e>
    1bec:	66 23       	and	r22, r22
    1bee:	71 f0       	breq	.+28     	; 0x1c0c <__floatsisf+0x74>
    1bf0:	96 e8       	ldi	r25, 0x86	; 134
    1bf2:	86 2f       	mov	r24, r22
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	2a f0       	brmi	.+10     	; 0x1c04 <__floatsisf+0x6c>
    1bfa:	9a 95       	dec	r25
    1bfc:	66 0f       	add	r22, r22
    1bfe:	77 1f       	adc	r23, r23
    1c00:	88 1f       	adc	r24, r24
    1c02:	da f7       	brpl	.-10     	; 0x1bfa <__floatsisf+0x62>
    1c04:	88 0f       	add	r24, r24
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	97 f9       	bld	r25, 7
    1c0c:	08 95       	ret

00001c0e <__fp_inf>:
    1c0e:	97 f9       	bld	r25, 7
    1c10:	9f 67       	ori	r25, 0x7F	; 127
    1c12:	80 e8       	ldi	r24, 0x80	; 128
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	08 95       	ret

00001c1a <__fp_nan>:
    1c1a:	9f ef       	ldi	r25, 0xFF	; 255
    1c1c:	80 ec       	ldi	r24, 0xC0	; 192
    1c1e:	08 95       	ret

00001c20 <__fp_pscA>:
    1c20:	00 24       	eor	r0, r0
    1c22:	0a 94       	dec	r0
    1c24:	16 16       	cp	r1, r22
    1c26:	17 06       	cpc	r1, r23
    1c28:	18 06       	cpc	r1, r24
    1c2a:	09 06       	cpc	r0, r25
    1c2c:	08 95       	ret

00001c2e <__fp_pscB>:
    1c2e:	00 24       	eor	r0, r0
    1c30:	0a 94       	dec	r0
    1c32:	12 16       	cp	r1, r18
    1c34:	13 06       	cpc	r1, r19
    1c36:	14 06       	cpc	r1, r20
    1c38:	05 06       	cpc	r0, r21
    1c3a:	08 95       	ret

00001c3c <__fp_round>:
    1c3c:	09 2e       	mov	r0, r25
    1c3e:	03 94       	inc	r0
    1c40:	00 0c       	add	r0, r0
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <__fp_round+0xc>
    1c44:	88 23       	and	r24, r24
    1c46:	52 f0       	brmi	.+20     	; 0x1c5c <__fp_round+0x20>
    1c48:	bb 0f       	add	r27, r27
    1c4a:	40 f4       	brcc	.+16     	; 0x1c5c <__fp_round+0x20>
    1c4c:	bf 2b       	or	r27, r31
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <__fp_round+0x18>
    1c50:	60 ff       	sbrs	r22, 0
    1c52:	04 c0       	rjmp	.+8      	; 0x1c5c <__fp_round+0x20>
    1c54:	6f 5f       	subi	r22, 0xFF	; 255
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	08 95       	ret

00001c5e <__fp_split3>:
    1c5e:	57 fd       	sbrc	r21, 7
    1c60:	90 58       	subi	r25, 0x80	; 128
    1c62:	44 0f       	add	r20, r20
    1c64:	55 1f       	adc	r21, r21
    1c66:	59 f0       	breq	.+22     	; 0x1c7e <__fp_splitA+0x10>
    1c68:	5f 3f       	cpi	r21, 0xFF	; 255
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <__fp_splitA+0x1a>
    1c6c:	47 95       	ror	r20

00001c6e <__fp_splitA>:
    1c6e:	88 0f       	add	r24, r24
    1c70:	97 fb       	bst	r25, 7
    1c72:	99 1f       	adc	r25, r25
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <__fp_splitA+0x20>
    1c76:	9f 3f       	cpi	r25, 0xFF	; 255
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <__fp_splitA+0x2a>
    1c7a:	87 95       	ror	r24
    1c7c:	08 95       	ret
    1c7e:	12 16       	cp	r1, r18
    1c80:	13 06       	cpc	r1, r19
    1c82:	14 06       	cpc	r1, r20
    1c84:	55 1f       	adc	r21, r21
    1c86:	f2 cf       	rjmp	.-28     	; 0x1c6c <__fp_split3+0xe>
    1c88:	46 95       	lsr	r20
    1c8a:	f1 df       	rcall	.-30     	; 0x1c6e <__fp_splitA>
    1c8c:	08 c0       	rjmp	.+16     	; 0x1c9e <__fp_splitA+0x30>
    1c8e:	16 16       	cp	r1, r22
    1c90:	17 06       	cpc	r1, r23
    1c92:	18 06       	cpc	r1, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	f1 cf       	rjmp	.-30     	; 0x1c7a <__fp_splitA+0xc>
    1c98:	86 95       	lsr	r24
    1c9a:	71 05       	cpc	r23, r1
    1c9c:	61 05       	cpc	r22, r1
    1c9e:	08 94       	sec
    1ca0:	08 95       	ret

00001ca2 <__fp_zero>:
    1ca2:	e8 94       	clt

00001ca4 <__fp_szero>:
    1ca4:	bb 27       	eor	r27, r27
    1ca6:	66 27       	eor	r22, r22
    1ca8:	77 27       	eor	r23, r23
    1caa:	cb 01       	movw	r24, r22
    1cac:	97 f9       	bld	r25, 7
    1cae:	08 95       	ret

00001cb0 <__mulsf3>:
    1cb0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__mulsf3x>
    1cb4:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__fp_round>
    1cb8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__fp_pscA>
    1cbc:	38 f0       	brcs	.+14     	; 0x1ccc <__mulsf3+0x1c>
    1cbe:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscB>
    1cc2:	20 f0       	brcs	.+8      	; 0x1ccc <__mulsf3+0x1c>
    1cc4:	95 23       	and	r25, r21
    1cc6:	11 f0       	breq	.+4      	; 0x1ccc <__mulsf3+0x1c>
    1cc8:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1ccc:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__fp_nan>
    1cd0:	11 24       	eor	r1, r1
    1cd2:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>

00001cd6 <__mulsf3x>:
    1cd6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__fp_split3>
    1cda:	70 f3       	brcs	.-36     	; 0x1cb8 <__mulsf3+0x8>

00001cdc <__mulsf3_pse>:
    1cdc:	95 9f       	mul	r25, r21
    1cde:	c1 f3       	breq	.-16     	; 0x1cd0 <__mulsf3+0x20>
    1ce0:	95 0f       	add	r25, r21
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	55 1f       	adc	r21, r21
    1ce6:	62 9f       	mul	r22, r18
    1ce8:	f0 01       	movw	r30, r0
    1cea:	72 9f       	mul	r23, r18
    1cec:	bb 27       	eor	r27, r27
    1cee:	f0 0d       	add	r31, r0
    1cf0:	b1 1d       	adc	r27, r1
    1cf2:	63 9f       	mul	r22, r19
    1cf4:	aa 27       	eor	r26, r26
    1cf6:	f0 0d       	add	r31, r0
    1cf8:	b1 1d       	adc	r27, r1
    1cfa:	aa 1f       	adc	r26, r26
    1cfc:	64 9f       	mul	r22, r20
    1cfe:	66 27       	eor	r22, r22
    1d00:	b0 0d       	add	r27, r0
    1d02:	a1 1d       	adc	r26, r1
    1d04:	66 1f       	adc	r22, r22
    1d06:	82 9f       	mul	r24, r18
    1d08:	22 27       	eor	r18, r18
    1d0a:	b0 0d       	add	r27, r0
    1d0c:	a1 1d       	adc	r26, r1
    1d0e:	62 1f       	adc	r22, r18
    1d10:	73 9f       	mul	r23, r19
    1d12:	b0 0d       	add	r27, r0
    1d14:	a1 1d       	adc	r26, r1
    1d16:	62 1f       	adc	r22, r18
    1d18:	83 9f       	mul	r24, r19
    1d1a:	a0 0d       	add	r26, r0
    1d1c:	61 1d       	adc	r22, r1
    1d1e:	22 1f       	adc	r18, r18
    1d20:	74 9f       	mul	r23, r20
    1d22:	33 27       	eor	r19, r19
    1d24:	a0 0d       	add	r26, r0
    1d26:	61 1d       	adc	r22, r1
    1d28:	23 1f       	adc	r18, r19
    1d2a:	84 9f       	mul	r24, r20
    1d2c:	60 0d       	add	r22, r0
    1d2e:	21 1d       	adc	r18, r1
    1d30:	82 2f       	mov	r24, r18
    1d32:	76 2f       	mov	r23, r22
    1d34:	6a 2f       	mov	r22, r26
    1d36:	11 24       	eor	r1, r1
    1d38:	9f 57       	subi	r25, 0x7F	; 127
    1d3a:	50 40       	sbci	r21, 0x00	; 0
    1d3c:	9a f0       	brmi	.+38     	; 0x1d64 <__mulsf3_pse+0x88>
    1d3e:	f1 f0       	breq	.+60     	; 0x1d7c <__mulsf3_pse+0xa0>
    1d40:	88 23       	and	r24, r24
    1d42:	4a f0       	brmi	.+18     	; 0x1d56 <__mulsf3_pse+0x7a>
    1d44:	ee 0f       	add	r30, r30
    1d46:	ff 1f       	adc	r31, r31
    1d48:	bb 1f       	adc	r27, r27
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	91 50       	subi	r25, 0x01	; 1
    1d52:	50 40       	sbci	r21, 0x00	; 0
    1d54:	a9 f7       	brne	.-22     	; 0x1d40 <__mulsf3_pse+0x64>
    1d56:	9e 3f       	cpi	r25, 0xFE	; 254
    1d58:	51 05       	cpc	r21, r1
    1d5a:	80 f0       	brcs	.+32     	; 0x1d7c <__mulsf3_pse+0xa0>
    1d5c:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_inf>
    1d60:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__fp_szero>
    1d64:	5f 3f       	cpi	r21, 0xFF	; 255
    1d66:	e4 f3       	brlt	.-8      	; 0x1d60 <__mulsf3_pse+0x84>
    1d68:	98 3e       	cpi	r25, 0xE8	; 232
    1d6a:	d4 f3       	brlt	.-12     	; 0x1d60 <__mulsf3_pse+0x84>
    1d6c:	86 95       	lsr	r24
    1d6e:	77 95       	ror	r23
    1d70:	67 95       	ror	r22
    1d72:	b7 95       	ror	r27
    1d74:	f7 95       	ror	r31
    1d76:	e7 95       	ror	r30
    1d78:	9f 5f       	subi	r25, 0xFF	; 255
    1d7a:	c1 f7       	brne	.-16     	; 0x1d6c <__mulsf3_pse+0x90>
    1d7c:	fe 2b       	or	r31, r30
    1d7e:	88 0f       	add	r24, r24
    1d80:	91 1d       	adc	r25, r1
    1d82:	96 95       	lsr	r25
    1d84:	87 95       	ror	r24
    1d86:	97 f9       	bld	r25, 7
    1d88:	08 95       	ret

00001d8a <__udivmodsi4>:
    1d8a:	a1 e2       	ldi	r26, 0x21	; 33
    1d8c:	1a 2e       	mov	r1, r26
    1d8e:	aa 1b       	sub	r26, r26
    1d90:	bb 1b       	sub	r27, r27
    1d92:	fd 01       	movw	r30, r26
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <__udivmodsi4_ep>

00001d96 <__udivmodsi4_loop>:
    1d96:	aa 1f       	adc	r26, r26
    1d98:	bb 1f       	adc	r27, r27
    1d9a:	ee 1f       	adc	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	a2 17       	cp	r26, r18
    1da0:	b3 07       	cpc	r27, r19
    1da2:	e4 07       	cpc	r30, r20
    1da4:	f5 07       	cpc	r31, r21
    1da6:	20 f0       	brcs	.+8      	; 0x1db0 <__udivmodsi4_ep>
    1da8:	a2 1b       	sub	r26, r18
    1daa:	b3 0b       	sbc	r27, r19
    1dac:	e4 0b       	sbc	r30, r20
    1dae:	f5 0b       	sbc	r31, r21

00001db0 <__udivmodsi4_ep>:
    1db0:	66 1f       	adc	r22, r22
    1db2:	77 1f       	adc	r23, r23
    1db4:	88 1f       	adc	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	1a 94       	dec	r1
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <__udivmodsi4_loop>
    1dbc:	60 95       	com	r22
    1dbe:	70 95       	com	r23
    1dc0:	80 95       	com	r24
    1dc2:	90 95       	com	r25
    1dc4:	9b 01       	movw	r18, r22
    1dc6:	ac 01       	movw	r20, r24
    1dc8:	bd 01       	movw	r22, r26
    1dca:	cf 01       	movw	r24, r30
    1dcc:	08 95       	ret

00001dce <__divmodsi4>:
    1dce:	05 2e       	mov	r0, r21
    1dd0:	97 fb       	bst	r25, 7
    1dd2:	1e f4       	brtc	.+6      	; 0x1dda <__divmodsi4+0xc>
    1dd4:	00 94       	com	r0
    1dd6:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__negsi2>
    1dda:	57 fd       	sbrc	r21, 7
    1ddc:	07 d0       	rcall	.+14     	; 0x1dec <__divmodsi4_neg2>
    1dde:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__udivmodsi4>
    1de2:	07 fc       	sbrc	r0, 7
    1de4:	03 d0       	rcall	.+6      	; 0x1dec <__divmodsi4_neg2>
    1de6:	4e f4       	brtc	.+18     	; 0x1dfa <__divmodsi4_exit>
    1de8:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__negsi2>

00001dec <__divmodsi4_neg2>:
    1dec:	50 95       	com	r21
    1dee:	40 95       	com	r20
    1df0:	30 95       	com	r19
    1df2:	21 95       	neg	r18
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	4f 4f       	sbci	r20, 0xFF	; 255
    1df8:	5f 4f       	sbci	r21, 0xFF	; 255

00001dfa <__divmodsi4_exit>:
    1dfa:	08 95       	ret

00001dfc <__negsi2>:
    1dfc:	90 95       	com	r25
    1dfe:	80 95       	com	r24
    1e00:	70 95       	com	r23
    1e02:	61 95       	neg	r22
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	8f 4f       	sbci	r24, 0xFF	; 255
    1e08:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0a:	08 95       	ret

00001e0c <__umulhisi3>:
    1e0c:	a2 9f       	mul	r26, r18
    1e0e:	b0 01       	movw	r22, r0
    1e10:	b3 9f       	mul	r27, r19
    1e12:	c0 01       	movw	r24, r0
    1e14:	a3 9f       	mul	r26, r19
    1e16:	70 0d       	add	r23, r0
    1e18:	81 1d       	adc	r24, r1
    1e1a:	11 24       	eor	r1, r1
    1e1c:	91 1d       	adc	r25, r1
    1e1e:	b2 9f       	mul	r27, r18
    1e20:	70 0d       	add	r23, r0
    1e22:	81 1d       	adc	r24, r1
    1e24:	11 24       	eor	r1, r1
    1e26:	91 1d       	adc	r25, r1
    1e28:	08 95       	ret

00001e2a <__muluhisi3>:
    1e2a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__umulhisi3>
    1e2e:	a5 9f       	mul	r26, r21
    1e30:	90 0d       	add	r25, r0
    1e32:	b4 9f       	mul	r27, r20
    1e34:	90 0d       	add	r25, r0
    1e36:	a4 9f       	mul	r26, r20
    1e38:	80 0d       	add	r24, r0
    1e3a:	91 1d       	adc	r25, r1
    1e3c:	11 24       	eor	r1, r1
    1e3e:	08 95       	ret

00001e40 <_exit>:
    1e40:	f8 94       	cli

00001e42 <__stop_program>:
    1e42:	ff cf       	rjmp	.-2      	; 0x1e42 <__stop_program>
